[
 {
  "question": "May i have exercise about week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "List exercise of week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "Give me exercise about week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "Do you have exercise of week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "Can i have exercise about week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "I need exercise of week 8 lecture",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "exercise about week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "I want exercise of week 8 lecture",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "Can you give me exercise about week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "Can you give me some exercise of week 8 lecture ?",
  "answer": "Query Processing and Assignment 2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lecture",
   "week 8"
  ]
 },
 {
  "question": "May i have exercise about assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List exercise of assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me exercise about assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have exercise of assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have exercise about assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need exercise of assignment 2",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "exercise about assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want exercise of assignment 2",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me exercise about assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me some exercise of assignment 2 ?",
  "answer": "Aim: experimental analysis of signature-based indexing\n tuple-level superimposed codeword signatures\n page-level superimposed codeword signatures\n bit-sliced superimposed codeword signatures\n Large numbers of tuples, inserted into a relation:\n implemented as one data file plus three signature files\n Produce several instance of (data+signatures) relations\n Run a set of benchmark PMR queries on these relations\n Measure query costs and analyse\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have exercise about assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List exercise of assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me exercise about assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have exercise of assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have exercise about assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need exercise of assignment 2",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "exercise about assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want exercise of assignment 2",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me exercise about assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me some exercise of assignment 2 ?",
  "answer": "File structures:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have exercise about assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List exercise of assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me exercise about assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have exercise of assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have exercise about assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need exercise of assignment 2",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "exercise about assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want exercise of assignment 2",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me exercise about assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me some exercise of assignment 2 ?",
  "answer": "We supply:\n a program to generate pseudo-random tuples (lots of them)\n where tuples look like: (id, name, numeric-attributes)\n a hash function (from PostgreSQL)\n You write:\n a program to build (data+signature) files from tuples\n a program to run queries (val,?,?,val,?,...) against the data\n Your programs must be parameterized:\n builder accepts different values for signature parameters\n query processor specifies what kind of signatures to use\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have exercise about assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List exercise of assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me exercise about assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have exercise of assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have exercise about assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need exercise of assignment 2",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "exercise about assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want exercise of assignment 2",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me exercise about assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me some exercise of assignment 2 ?",
  "answer": "Experiments:\n run each query using each signature type\n for each sig type\n read appropriate signature pages (maybe all)\n determine which data pages to read\n fetch pages and search for matching tuples\n determine total cost (#signature pages + #data pages)\n record costs and analyse/compare\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have exercise about query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "List exercise of query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "Give me exercise about query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "Do you have exercise of query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "Can i have exercise about query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "I need exercise of query processing so far",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "exercise about query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "I want exercise of query processing so far",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "Can you give me exercise about query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "Can you give me some exercise of query processing so far ?",
  "answer": "Steps in processing an SQL statement\n parse, map to relation algebra (RA) expression\n transform to more efficient RA expression\n instantiate RA operators to DBMS operations\n execute DBMS operations (aka query plan)\n Cost-based optimisation:\n generate possible query plans  (via rewriting/heuristics)\n estimate cost of each plan  (sum costs of operations)\n choose the lowest-cost plan  (... and choose quickly)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "processing",
   "so",
   "far"
  ]
 },
 {
  "question": "May i have exercise about expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "List exercise of expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "Give me exercise about expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "Do you have exercise of expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "Can i have exercise about expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "I need exercise of expression rewriting rule",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "exercise about expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "I want exercise of expression rewriting rule",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "Can you give me exercise about expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "Can you give me some exercise of expression rewriting rule ?",
  "answer": "Since RA is a well-defined formal system\n there exist many algebraic laws on RA expressions\n which can be used as a basis for expression rewriting\n in order to produce equivalent (more-efficient?) expressions\n Expression transformation based on such rules can be used\n to simplify/improve SQL\u2192RA mapping results\n to generate new plan variations to check in query optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "expression",
   "rewriting",
   "rule"
  ]
 },
 {
  "question": "May i have exercise about relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "List exercise of relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Give me exercise about relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Do you have exercise of relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can i have exercise about relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I need exercise of relational algebra law",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "exercise about relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I want exercise of relational algebra law",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me exercise about relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me some exercise of relational algebra law ?",
  "answer": "Commutative and Associative Laws:\n R \u22c8 S  \u2194  S \u22c8 R,    (R \u22c8 S) \u22c8 T  \u2194  R \u22c8 (S \u22c8 T)    (natural join)\n R \u222a S  \u2194  S \u222a R,    (R \u222a S) \u222a T  \u2194  R \u222a (S \u222a T)\n R \u22c8Cond S  \u2194  S \u22c8Cond R    (theta join)\n \u03c3c ( \u03c3d (R))   \u2194   \u03c3d ( \u03c3c (R))\n Selection splitting (where c and d are conditions):\n \u03c3c\u2227d(R)   \u2194   \u03c3c ( \u03c3d (R))\n \u03c3c\u2228d(R)   \u2194   \u03c3c(R)  \u222a  \u03c3d(R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "May i have exercise about relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "List exercise of relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Give me exercise about relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Do you have exercise of relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can i have exercise about relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I need exercise of relational algebra law",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "exercise about relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I want exercise of relational algebra law",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me exercise about relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me some exercise of relational algebra law ?",
  "answer": "Selection pushing   ( \u03c3c(R \u222a S) and \u03c3c(R \u222a S) ):\n \u03c3c(R \u222a S)  \u2194  \u03c3cR \u222a \u03c3cS,     \u03c3c(R \u2229 S)  \u2194  \u03c3cR \u2229 \u03c3cS\n Selection pushing with join ...\n \u03c3c (R \u22c8 S)   \u2194   \u03c3c(R)  \u22c8  S    (if c refers only to attributes from R )\n \u03c3c (R \u22c8 S)   \u2194   R  \u22c8  \u03c3c(S)    (if c refers only to attributes from S )\n If condition contains attributes from both R and S:\n \u03c3c\u2032\u2227c\u2033 (R \u22c8 S)   \u2194   \u03c3c\u2032(R)  \u22c8  \u03c3c\u2033(S)\n c\u2032 contains only R attributes, c\u2033 contains only S attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "May i have exercise about relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "List exercise of relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Give me exercise about relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Do you have exercise of relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can i have exercise about relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I need exercise of relational algebra law",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "exercise about relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I want exercise of relational algebra law",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me exercise about relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me some exercise of relational algebra law ?",
  "answer": "Rewrite rules for projection ...\n All but last projection can be ignored:\n \u03c0L1 ( \u03c0L2 ( ... \u03c0Ln (R)))   \u2192   \u03c0L1 (R)\n Projections can be pushed into joins:\n \u03c0L (R  \u22c8c S)   \u2194   \u03c0L ( \u03c0M(R)  \u22c8c  \u03c0N(S) )\n where\n M and N must contain all attributes needed for c\n M and N must contain all attributes used in L   (L \u2282 M\u222aN)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "May i have exercise about relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "List exercise of relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Give me exercise about relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Do you have exercise of relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can i have exercise about relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I need exercise of relational algebra law",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "exercise about relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "I want exercise of relational algebra law",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me exercise about relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "Can you give me some exercise of relational algebra law ?",
  "answer": "Subqueries \u21d2 convert to a join\n Example:   (on schema Courses(id,code,...), Enrolments(cid,sid,...), Students(id,name,...)\n select c.code, count(*)\n from   Courses c\n where  c.id in (select cid from Enrolments)\n group  by c.code\n becomes\n select c.code, count(*)\n from   Courses c join Enrolments e on c.id = e.cid\n group  by c.code\n but not\n select e.sid as student_id, e.cid as course_id\n from   Enrolments e\n where  e.sid = (select max(id) from Students)\n Query Optimisation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "relational",
   "algebra",
   "law"
  ]
 },
 {
  "question": "May i have exercise about query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "List exercise of query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Give me exercise about query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Do you have exercise of query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can i have exercise about query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "I need exercise of query optimisation",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "exercise about query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "I want exercise of query optimisation",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me exercise about query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me some exercise of query optimisation ?",
  "answer": "Query optimiser:   RA expression \u2192 efficient evaluation plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "May i have exercise about query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "List exercise of query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Give me exercise about query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Do you have exercise of query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can i have exercise about query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "I need exercise of query optimisation",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "exercise about query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "I want exercise of query optimisation",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me exercise about query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me some exercise of query optimisation ?",
  "answer": "Query optimisation is a critical step in query evaluation.\n The query optimiser\n takes relational algebra expression from SQL compiler\n produces sequence of RelOps to evaluate the expression\n query execution plan should provide efficient evaluation\n \"Optimisation\" is a misnomer since query optimisers\n aim to find a good plan ... but maybe not optimal\n Observed Query Time = Planning time + Evaluation time\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "May i have exercise about query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "List exercise of query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Give me exercise about query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Do you have exercise of query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can i have exercise about query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "I need exercise of query optimisation",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "exercise about query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "I want exercise of query optimisation",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me exercise about query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me some exercise of query optimisation ?",
  "answer": " Finding an optimal query plan ...\n requires exhaustive search of a space of possible plans\n for each possible plan, need to estimate cost (not cheap)\n Even for relatively small query, search space is very large.\n Compromise:\n do limited search of query plan space   (guided by heuristics)\n quickly choose a reasonably efficient execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation"
  ]
 },
 {
  "question": "May i have exercise about approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "List exercise of approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "Give me exercise about approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "Do you have exercise of approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "Can i have exercise about approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "I need exercise of approach optimisation",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "exercise about approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "I want exercise of approach optimisation",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me exercise about approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me some exercise of approach optimisation ?",
  "answer": "Three main classes of techniques developed:\n algebraic     (equivalences, rewriting, heuristics)\n physical      (execution costs, search-based)\n semantic     (application properties, heuristics)\n All driven by aim of minimising (or at least reducing) \"cost\".\n Real query optimisers use a combination of algrebraic+physical.\n Semantic QO is good idea, but expensive/difficult to implement.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "optimisation"
  ]
 },
 {
  "question": "May i have exercise about approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "List exercise of approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "Give me exercise about approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "Do you have exercise of approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "Can i have exercise about approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "I need exercise of approach to optimisation",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "exercise about approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "I want exercise of approach to optimisation",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me exercise about approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "Can you give me some exercise of approach to optimisation ?",
  "answer": "Example of optimisation transformations: For join, may also consider sort/merge join and hash join.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "approach",
   "to",
   "optimisation"
  ]
 },
 {
  "question": "May i have exercise about cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "List exercise of cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "Give me exercise about cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "Do you have exercise of cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "Can i have exercise about cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "I need exercise of cost-based query optimiser",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "exercise about cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "I want exercise of cost-based query optimiser",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "Can you give me exercise about cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "Can you give me some exercise of cost-based query optimiser ?",
  "answer": "Approximate algorithm for cost-based optimisation:\n translate SQL query to RAexp\n for enough transformations RA' of RAexp {\n    while (more choices for RelOps) {\n       plan = {}; i = 0\n       for each node e of RA' (recursively) {\n          select RelOp method for e\n          plan[i++] = RelOp method for e\n       }\n       cost = 0\n       for each op in plan[] { cost += Cost(op) }\n       if (cost < MinCost)\n          { MinCost = cost;  BestPlan = plan }\n    }\n }\n Heuristics: push selections down, consider only left-deep join trees.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost-based",
   "query",
   "optimiser"
  ]
 },
 {
  "question": "May i have exercise about exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "List exercise of exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "Give me exercise about exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "Do you have exercise of exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "Can i have exercise about exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "I need exercise of exercise 1 alternative join plan",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "exercise about exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "I want exercise of exercise 1 alternative join plan",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 1 alternative join plan ?",
  "answer": "Consider the schema\n Students(id,name,....)   Enrol(student,course,mark)\n Staff(id,name,...)    Courses(id,code,term,lic,...)\n the following query on this schema\n select c.code, s.id, s.name\n from   Students s, Enrol e, Courses c, Staff f\n where  s.id=e.student and e.course=c.id\n        and c.lic=f.id and c.term='11s2'\n        and f.name='John Shepherd'\n Show some possible evaluation orders for this query.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "1",
   "alternative",
   "join",
   "plan"
  ]
 },
 {
  "question": "May i have exercise about cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "List exercise of cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "Give me exercise about cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "Do you have exercise of cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "Can i have exercise about cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "I need exercise of cost model and analysis",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "exercise about cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "I want exercise of cost model and analysis",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "Can you give me exercise about cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "Can you give me some exercise of cost model and analysis ?",
  "answer": "The cost of evaluating a query is determined by:\n size of relations   (database relations and temporary relations)\n access mechanisms   (indexing, hashing, sorting, join algorithms)\n size/number of main memory buffers   (and replacement strategy)\n Analysis of costs involves estimating:\n size of intermediate results\n number of secondary storage accesses\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "model",
   "and",
   "analysis"
  ]
 },
 {
  "question": "May i have exercise about choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "List exercise of choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Give me exercise about choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Do you have exercise of choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can i have exercise about choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I need exercise of choosing access method (relops)",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "exercise about choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I want exercise of choosing access method (relops)",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me exercise about choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me some exercise of choosing access method (relops) ?",
  "answer": "Performed for each node in RA expression tree ...\n Inputs:\n a single RA operation   (\u03c3,   \u03c0,   \u22c8)\n information about file organisation, data distribution, ...\n list of operations available in the database engine\n Output:\n specific DBMS operation to implement this RA operation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "May i have exercise about choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "List exercise of choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Give me exercise about choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Do you have exercise of choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can i have exercise about choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I need exercise of choosing access method (relops)",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "exercise about choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I want exercise of choosing access method (relops)",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me exercise about choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me some exercise of choosing access method (relops) ?",
  "answer": "Example:\n RA operation: Sel[name='John' \u2227 age>21](Student)\n Student relation has B-tree index on name\n database engine (obviously) has B-tree search method\n giving\n tmp[i]   := BtreeSearch[name='John'](Student)\n tmp[i+1] := LinearSearch[age>21](tmp[i])\n Where possible, use pipelining to avoid storing tmp[i] on disk.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "May i have exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "List exercise of choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Give me exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Do you have exercise of choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can i have exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I need exercise of choosing access method (relops)",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I want exercise of choosing access method (relops)",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me some exercise of choosing access method (relops) ?",
  "answer": "Rules for choosing \u03c3 access methods:\n \u03c3A=c(R) and R has index on A   \u21d2   indexSearch[A=c](R)\n \u03c3A=c(R) and R is hashed on A   \u21d2   hashSearch[A=c](R)\n \u03c3A=c(R) and R is sorted on A   \u21d2   binarySearch[A=c](R)\n \u03c3A \u2265 c(R) and R has clustered index on A                             \u21d2   indexSearch[A=c](R) then scan\n \u03c3A \u2265 c(R) and R is hashed on A                             \u21d2   linearSearch[A>=c](R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "May i have exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "List exercise of choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Give me exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Do you have exercise of choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can i have exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I need exercise of choosing access method (relops)",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "I want exercise of choosing access method (relops)",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me exercise about choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "Can you give me some exercise of choosing access method (relops) ?",
  "answer": "Rules for choosing \u22c8 access methods:\n R \u22c8 S and R fits in memory buffers   \u21d2   bnlJoin(R,S)\n R \u22c8 S and S fits in memory buffers   \u21d2   bnlJoin(S,R)\n R \u22c8 S and R,S sorted on join attr   \u21d2   smJoin(R,S)\n R \u22c8 S and R has index on join attr   \u21d2   inlJoin(S,R)\n R \u22c8 S and no indexes, no sorting   \u21d2   hashJoin(R,S)\n  (bnl = block nested loop;   inl = index nested loop;   sm = sort merge)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "choosing",
   "access",
   "method",
   "(relops)"
  ]
 },
 {
  "question": "May i have exercise about cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "List exercise of cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "Give me exercise about cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "Do you have exercise of cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "Can i have exercise about cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "I need exercise of cost estimation",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "exercise about cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "I want exercise of cost estimation",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "Can you give me exercise about cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "Can you give me some exercise of cost estimation ?",
  "answer": "Without executing a plan, cannot always know its precise cost.\n Thus, query optimisers estimate costs via:\n cost of performing operation   (dealt with in earlier lectures)\n size of result   (which affects cost of performing next operation)\n Result size determined by statistical measures on relations, e.g.\n rS cardinality of relation S\n RS avg size of tuple in relation S\n V(A,S) # distinct values of attribute A\n min(A,S) min value of attribute A\n max(A,S) max value of attribute A\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation"
  ]
 },
 {
  "question": "May i have exercise about estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "List exercise of estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "Give me exercise about estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "Do you have exercise of estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can i have exercise about estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "I need exercise of estimating projection result size",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "exercise about estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "I want exercise of estimating projection result size",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me exercise about estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me some exercise of estimating projection result size ?",
  "answer": "Straightforward, since we know:\n number of tuples in output\n rout = | \u03c0a,b,..(T) | = | T | = rT    (in SQL, because of bag semantics)\n size of tuples in output\n Rout = sizeof(a) + sizeof(b) + ... + tuple-overhead\n Assume page size B,   bout = \u2308rT / cout\u2309,   where cout = \u230aB/Rout\u230b\n If using select distinct ...\n | \u03c0a,b,..(T) | depends on proportion of duplicates produced\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "projection",
   "result",
   "size"
  ]
 },
 {
  "question": "May i have exercise about estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "List exercise of estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Give me exercise about estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Do you have exercise of estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can i have exercise about estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I need exercise of estimating selection result size",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "exercise about estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I want exercise of estimating selection result size",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me exercise about estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me some exercise of estimating selection result size ?",
  "answer": "Selectivity = fraction of tuples expected to satisfy a condition.\n Common assumption: attribute values uniformly distributed.\n Example: Consider the query\n select * from Parts where colour='Red'\n If   V(colour,Parts)=4,   r=1000  \u21d2  |\u03c3colour=red(Parts)|=250\n In general, | \u03c3A=c(R) |  \u2245  rR / V(A,R)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "May i have exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "List exercise of estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Give me exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Do you have exercise of estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can i have exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I need exercise of estimating selection result size",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I want exercise of estimating selection result size",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me some exercise of estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where year > 2005;\n Could estimate by using:\n uniform distribution assumption,   r,   min/max years\n Assume: min(year)=2000, max(year)=2009, |Enrolment|=105\n 105 from 2000-2009 means approx 10000 enrolments/year\n this suggests 40000 enrolments since 2006\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "May i have exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "List exercise of estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Give me exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Do you have exercise of estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can i have exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I need exercise of estimating selection result size",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I want exercise of estimating selection result size",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me exercise about estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me some exercise of estimating selection result size ?",
  "answer": "Estimating size of result for e.g.\n select * from Enrolment where course <> 'COMP9315';\n Could estimate by using:\n uniform distribution assumption,   r,   domain size\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "May i have exercise about exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "List exercise of exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Give me exercise about exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Do you have exercise of exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Can i have exercise about exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "I need exercise of exercise 2 selection size estimation",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "exercise about exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "I want exercise of exercise 2 selection size estimation",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 2 selection size estimation ?",
  "answer": "Assuming that\n all attributes have uniform distribution of data values\n attributes are independent of each other\n Give formulae for the number of expected results for\n 1. select * from R where not A=k\n 2. select * from R where A=k and B=j\n 3. select * from R where A in (k,l,m,n)\n where j, k, l, m, n are constants.\n Assume: V(A,R) = 10  and V(B,R)=100  and r=1000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "2",
   "selection",
   "size",
   "estimation"
  ]
 },
 {
  "question": "May i have exercise about estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "List exercise of estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Give me exercise about estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Do you have exercise of estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can i have exercise about estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I need exercise of estimating selection result size",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "exercise about estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I want exercise of estimating selection result size",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me exercise about estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me some exercise of estimating selection result size ?",
  "answer": " collect statistics about the values stored in the attribute/relation\n store these as e.g. a histogram in the meta-data for the relation\n So, for part colour example, might have distribution like:\n White: 35%   Red: 30%   Blue: 25%   Silver: 10%\n Use histogram as basis for determining # selected tuples.\n Disadvantage: cost of storing/maintaining histograms.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "May i have exercise about estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "List exercise of estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Give me exercise about estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Do you have exercise of estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can i have exercise about estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I need exercise of estimating selection result size",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "exercise about estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "I want exercise of estimating selection result size",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me exercise about estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me some exercise of estimating selection result size ?",
  "answer": "Summary: analysis relies on operation and data distribution:\n E.g. select * from R where a = k;\n Case 1:   uniq(R.a)   \u21d2   0 or 1 result\n Case 2:   rR  tuples && size(dom(R.a)) = n   \u21d2   rR / n results\n E.g. select * from R where a < k;\n Case 1:   k \u2264 min(R.a)   \u21d2   0 results\n Case 2:   k > max(R.a)   \u21d2   \u2245 rR results\n Case 3:   size(dom(R.a)) = n   \u21d2   ? min(R.a) ... k ... max(R.a) ?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "selection",
   "result",
   "size"
  ]
 },
 {
  "question": "May i have exercise about estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "List exercise of estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "Give me exercise about estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "Do you have exercise of estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "Can i have exercise about estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "I need exercise of estimating join result size",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "exercise about estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "I want exercise of estimating join result size",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me exercise about estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "Can you give me some exercise of estimating join result size ?",
  "answer": "Analysis relies on semantic knowledge about data/relations.\n Consider equijoin on common attr: R \u22c8a S\n Case 1:   values(R.a) \u2229 values(S.a) = {}   \u21d2   size(R \u22c8a S) = 0\n Case 2:   uniq(R.a) and uniq(S.a)   \u21d2   size(R \u22c8a S)  \u2264  min(|R|, |S|)\n Case 3:   pkey(R.a) and fkey(S.a)   \u21d2   size(R \u22c8a S)  \u2264  |S|\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "estimating",
   "join",
   "result",
   "size"
  ]
 },
 {
  "question": "May i have exercise about exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "List exercise of exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Give me exercise about exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Do you have exercise of exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Can i have exercise about exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "I need exercise of exercise 3 join size estimation",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "exercise about exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "I want exercise of exercise 3 join size estimation",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 3 join size estimation ?",
  "answer": " 1. select * from R, S where R.s = S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 2. select * from R, S where R.s <> S.id where S.id is a primary key and R.s is a foreign key referencing S.id\n 3. select * from R, S where R.x = S.y where R.x and S.y have no connection except that dom(R.x)=dom(S.y)\n Under what conditions will the first query have maximum size?\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "3",
   "join",
   "size",
   "estimation"
  ]
 },
 {
  "question": "May i have exercise about cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "List exercise of cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "Give me exercise about cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "Do you have exercise of cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "Can i have exercise about cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "I need exercise of cost estimation postscript",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "exercise about cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "I want exercise of cost estimation postscript",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "Can you give me exercise about cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "Can you give me some exercise of cost estimation postscript ?",
  "answer": "Inaccurate cost estimation can lead to poor evaluation plans.\n Above methods can (sometimes) give inaccurate estimates.\n To get more accurate cost estimates:\n more time ... complex computation of selectivity\n more space ... storage for histograms of data values\n Either way, optimisation process costs more (more than query?)\n Trade-off between optimiser performance and query performance.\n PostgreSQL Query Optimiser\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "estimation",
   "postscript"
  ]
 },
 {
  "question": "May i have exercise about overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "List exercise of overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "Give me exercise about overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "Do you have exercise of overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "Can i have exercise about overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "I need exercise of overview of qopt process",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "exercise about overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "I want exercise of overview of qopt process",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "Can you give me exercise about overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "Can you give me some exercise of overview of qopt process ?",
  "answer": "Input: tree of Query nodes returned by parser\n Output: tree of Plan nodes used by query executor\n wrapped in a PlannedStmt node containing state info\n Intermediate data structures are trees of Path nodes\n a path tree represents one evaluation order for a query\n All Node types are defined in include/nodes/*.h\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "overview",
   "of",
   "qopt",
   "process"
  ]
 },
 {
  "question": "May i have exercise about qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "List exercise of qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Give me exercise about qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Do you have exercise of qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Can i have exercise about qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "I need exercise of qopt data structure",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "exercise about qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "I want exercise of qopt data structure",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Can you give me exercise about qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Can you give me some exercise of qopt data structure ?",
  "answer": "Generic Path node structure:\n typedef struct Path\n {\n    NodeTag     type;          // scan/join/...\n    NodeTag     pathtype;      // specific method\n    RelOptInfo *parent;        // output relation\n    PathTarget *pathtarget;    // list of Vars/Exprs, width    // estimated execution costs for path ...\n    Cost        startup_cost;  // setup cost\n    Cost        total_cost;    // total cost\n    List       *pathkeys;      // sort order\n } Path;\n PathKey = (opfamily:Oid, strategy:SortDir, nulls_first:bool)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "May i have exercise about qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "List exercise of qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Give me exercise about qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Do you have exercise of qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Can i have exercise about qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "I need exercise of qopt data structure",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "exercise about qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "I want exercise of qopt data structure",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Can you give me exercise about qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "Can you give me some exercise of qopt data structure ?",
  "answer": "Specialised Path nodes (simplified):\n typedef struct IndexPath\n {\n    Path    path;\n    IndexOptInfo *indexinfo; // index for scan    List   *indexclauses; // index select conditions    ...\n    ScanDirection  indexscandir; // used by planner    Selectivity  indexselectivity; // estimated #results } IndexPath;\n typedef struct JoinPath\n {\n    Path      path;\n    JoinType  jointype;     // inner/outer/semi/anti    Path     *outerpath;    // outer part of the join    Path     *innerpath;    // inner part of the join    List     *restrictinfo; // join condition(s) } JoinPath;\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "qopt",
   "data",
   "structure"
  ]
 },
 {
  "question": "May i have exercise about query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "List exercise of query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "Give me exercise about query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "Do you have exercise of query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "Can i have exercise about query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "I need exercise of query optimisation process",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "exercise about query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "I want exercise of query optimisation process",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "Can you give me exercise about query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "Can you give me some exercise of query optimisation process ?",
  "answer": "Query optimisation proceeds in two stages (after parsing)...\n Rewriting:\n uses PostgreSQL's rule system\n query tree is expanded to include e.g. view definitions\n Planning and optimisation:\n using cost-based analysis of generated paths\n via one of two different path generators\n chooses least-cost path from all those considered\n Then produces a Plan tree from the selected path.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "optimisation",
   "process"
  ]
 },
 {
  "question": "May i have exercise about top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "List exercise of top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Give me exercise about top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Do you have exercise of top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can i have exercise about top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I need exercise of top-down trace of qopt",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "exercise about top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I want exercise of top-down trace of qopt",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me exercise about top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me some exercise of top-down trace of qopt ?",
  "answer": "Top-level of query execution: backend/tcop/postgres.c\n exec_simple_query(const char *query_string)\n {\n   // lots of setting up ... including starting xact\n   parsetree_list = pg_parse_query(query_string);\n   foreach(parsetree, parsetree_list) {\n     // Query optimisation\n     querytree_list = pg_analyze_and_rewrite(parsetree,...);\n     plantree_list = pg_plan_queries(querytree_list,...);\n     // Query execution\n     portal = CreatePortal(...plantree_list...);\n     PortalRun(portal,...);\n   }\n   // lots of cleaning up ... including close xact\n }\n Assumes that we are dealing with multiple queries (i.e. SQL statements)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "May i have exercise about top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "List exercise of top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Give me exercise about top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Do you have exercise of top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can i have exercise about top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I need exercise of top-down trace of qopt",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "exercise about top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I want exercise of top-down trace of qopt",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me exercise about top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me some exercise of top-down trace of qopt ?",
  "answer": "pg_analyze_and_rewrite()\n take a parse tree (from SQL parser)\n transforms Parse tree into Query tree   (SQL \u2192 RA)\n applies rewriting rules   (e.g. views)\n returns a list of Query trees\n Code in: backend/tcop/postgres.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "May i have exercise about top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "List exercise of top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Give me exercise about top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Do you have exercise of top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can i have exercise about top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I need exercise of top-down trace of qopt",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "exercise about top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I want exercise of top-down trace of qopt",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me exercise about top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me some exercise of top-down trace of qopt ?",
  "answer": "pg_plan_queries()\n takes a list of parsed/re-written queries\n plans each one via planner()\n which invokes subquery_planner() on each query\n returns a list of query plans\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "May i have exercise about top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "List exercise of top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Give me exercise about top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Do you have exercise of top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can i have exercise about top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I need exercise of top-down trace of qopt",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "exercise about top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I want exercise of top-down trace of qopt",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me exercise about top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me some exercise of top-down trace of qopt ?",
  "answer": "subquery_planner()\n performs algebraic transformations/simplifications, e.g.\n simplifies conditions in where clauses\n converts sub-queries in where to top-level join\n moves having clauses with no aggregate into where\n flattens sub-queries in join list\n simplifies join tree (e.g. removes redundant terms), etc.\n sets up canonical version of query for plan generation\n invokes grouping_planner() to produce best path\n Code in: backend/optimizer/plan/planner.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "May i have exercise about top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "List exercise of top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Give me exercise about top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Do you have exercise of top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can i have exercise about top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I need exercise of top-down trace of qopt",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "exercise about top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I want exercise of top-down trace of qopt",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me exercise about top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me some exercise of top-down trace of qopt ?",
  "answer": "grouping_planner() produces plan for one SQL statement\n preprocesses target list for INSERT/UPDATE\n handles \"planning\" for extended-RA SQL constructs:\n set operations: UNION/INTERSECT/EXCEPT\n GROUP BY, HAVING, aggregations\n ORDER BY, DISTINCT, LIMIT\n invokes query_planner() for select/join trees\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "May i have exercise about top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "List exercise of top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Give me exercise about top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Do you have exercise of top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can i have exercise about top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I need exercise of top-down trace of qopt",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "exercise about top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I want exercise of top-down trace of qopt",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me exercise about top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me some exercise of top-down trace of qopt ?",
  "answer": "query_planner() produces plan for a select/join tree\n make list of tables used in query\n split where qualifiers (\"quals\") into\n restrictions (e.g. r.a=1) ... for selections\n joins (e.g. s.id=r.s) ... for joins\n search for quals to enable merge/hash joins\n invoke make_one_rel() to find best path/plan\n Code in: backend/optimizer/plan/planmain.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "May i have exercise about top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "List exercise of top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Give me exercise about top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Do you have exercise of top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can i have exercise about top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I need exercise of top-down trace of qopt",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "exercise about top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "I want exercise of top-down trace of qopt",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me exercise about top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "Can you give me some exercise of top-down trace of qopt ?",
  "answer": "make_one_rel() generates possible plans, selects best\n generate scan and index paths for base tables\n using of restrictions list generated above\n generate access paths for the entire join tree\n recursive process, controlled by make_rel_from_joinlist()\n returns a single \"relation\", representing result set\n Code in: backend/optimizer/path/allpaths.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "top-down",
   "trace",
   "of",
   "qopt"
  ]
 },
 {
  "question": "May i have exercise about join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "List exercise of join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Give me exercise about join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Do you have exercise of join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can i have exercise about join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "I need exercise of join-tree generation",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "exercise about join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "I want exercise of join-tree generation",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can you give me exercise about join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can you give me some exercise of join-tree generation ?",
  "answer": "make_rel_from_joinlist() arranges path generation\n switches between two possible path tree generators\n path tree generators finally return best cost path\n Standard path tree generator (standard_join_search()):\n \"exhaustively\" generates join trees (like System R)\n starts with 2-way joins, finds best combination\n then adds extra table to give 3-table join, etc.\n Code in:   backend/optimizer/path/{allpaths.c,joinrels.c}\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "May i have exercise about join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "List exercise of join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Give me exercise about join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Do you have exercise of join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can i have exercise about join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "I need exercise of join-tree generation",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "exercise about join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "I want exercise of join-tree generation",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can you give me exercise about join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can you give me some exercise of join-tree generation ?",
  "answer": "Genetic query optimiser (geqo):\n uses genetic algorithm (GA) to generate path trees\n handles joins involving > geqo_threshold relations\n goals of this approach:\n find near-optimal solution\n examine far less than entire search space\n Code in:   backend/optimizer/geqo/*.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "May i have exercise about join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "List exercise of join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Give me exercise about join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Do you have exercise of join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can i have exercise about join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "I need exercise of join-tree generation",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "exercise about join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "I want exercise of join-tree generation",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can you give me exercise about join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "Can you give me some exercise of join-tree generation ?",
  "answer": "Basic idea of genetic algorithm:\n Optimize(join)\n {\n    t = 0\n    p = initialState(join)  // pool of (random) join orders\n    for (t = 0; t < #generations; t++) {\n       p' = recombination(p) // get parts of good join orders       p'' = mutation(p')    // generate new variations       p = selection(p'',p)  // choose best join orders    }\n }\n #generations determined by size of initial pool of join orders\n Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "join-tree",
   "generation"
  ]
 },
 {
  "question": "May i have exercise about query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "List exercise of query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "I need exercise of query execution",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "exercise about query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "I want exercise of query execution",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of query execution ?",
  "answer": "Query execution:   applies evaluation plan \u2192 result tuples\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "List exercise of query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "I need exercise of query execution",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "exercise about query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "I want exercise of query execution",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of query execution ?",
  "answer": "Example of query translation:\n select s.name, s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and e.semester = '05s2';\n maps to\n \u03c0name,id,course,mark(Stu \u22c8e.student=s.id (\u03c3semester=05s2Enr))\n maps to\n Temp1  = BtreeSelect[semester=05s2](Enr)\n Temp2  = HashJoin[e.student=s.id](Stu,Temp1)\n Result = Project[name,id,course,mark](Temp2)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "List exercise of query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "I need exercise of query execution",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "exercise about query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "I want exercise of query execution",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of query execution ?",
  "answer": "A query execution plan:\n consists of a collection of RelOps\n executing together to produce a set of result tuples\n Results may be passed from one operator to the next:\n materialization ... writing results to disk and reading them back\n pipelining ... generating and passing via memory buffers\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "List exercise of materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "Give me exercise about materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "Do you have exercise of materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "Can i have exercise about materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "I need exercise of materialization",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "exercise about materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "I want exercise of materialization",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "Can you give me exercise about materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "Can you give me some exercise of materialization ?",
  "answer": "Steps in materialization between two operators\n first operator reads input(s) and writes results to disk\n next operator treats tuples on disk as its input\n in essence, the Temp tables are produced as real tables\n Advantage:\n intermediate results can be placed in a file structure (which can be chosen to speed up execution of subsequent operators)\n Disadvantage:\n requires disk space/writes for intermediate results\n requires disk access to read intermediate results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "materialization"
  ]
 },
 {
  "question": "May i have exercise about pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "List exercise of pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Give me exercise about pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Do you have exercise of pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can i have exercise about pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "I need exercise of pipelining",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "exercise about pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "I want exercise of pipelining",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can you give me exercise about pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can you give me some exercise of pipelining ?",
  "answer": " blocks execute \"concurrently\" as producer/consumer pairs\n first operator acts as producer; second as consumer\n structured as interacting iterators (open; while(next); close)\n Advantage:\n no requirement for disk access (results passed via memory buffers)\n Disadvantage:\n higher-level operators access inputs via linear scan,   or\n requires sufficient memory buffers to hold all outputs\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "May i have exercise about iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "List exercise of iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "Give me exercise about iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "Do you have exercise of iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "Can i have exercise about iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "I need exercise of iterators (reminder)",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "exercise about iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "I want exercise of iterators (reminder)",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "Can you give me exercise about iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "Can you give me some exercise of iterators (reminder) ?",
  "answer": "Iterators provide a \"stream\" of results:\n iter = startScan(params)\n set up data structures for iterator   (create state, open files, ...)\n params are specific to operator  (e.g. reln, condition, #buffers, ...)\n tuple = nextTuple(iter)\n get the next tuple in the iteration; return null if no more\n endScan(iter)\n clean up data structures for iterator\n Other possible operations: reset to specific point, restart, ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "iterators",
   "(reminder)"
  ]
 },
 {
  "question": "May i have exercise about pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "List exercise of pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Give me exercise about pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Do you have exercise of pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can i have exercise about pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "I need exercise of pipelining example",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "exercise about pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "I want exercise of pipelining example",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can you give me exercise about pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can you give me some exercise of pipelining example ?",
  "answer": "Consider the query:\n select s.id, e.course, e.mark\n from   Student s, Enrolment e\n where  e.student = s.id and\n        e.semester = '05s2' and s.name = 'John';\n which maps to the RA expression\n Proj[id,course,mark](Join[student=id](Sel[05s2](Enr),Sel[John](Stu)))\n which could represented by the RA expression tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "May i have exercise about pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "List exercise of pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Give me exercise about pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Do you have exercise of pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can i have exercise about pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "I need exercise of pipelining example",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "exercise about pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "I want exercise of pipelining example",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can you give me exercise about pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "Can you give me some exercise of pipelining example ?",
  "answer": "Modelled as communication between RA tree nodes:\n Note: likely that projection is combined with join in real DBMSs.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "pipelining"
  ]
 },
 {
  "question": "May i have exercise about disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "List exercise of disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "Give me exercise about disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "Do you have exercise of disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "Can i have exercise about disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "I need exercise of disk access",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "exercise about disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "I want exercise of disk access",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "Can you give me exercise about disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "Can you give me some exercise of disk access ?",
  "answer": "Pipelining cannot avoid all disk accesses.\n Some operations use multiple passes (e.g. merge-sort, hash-join).\n data is written by one pass, read by subsequent passes\n Thus ...\n within an operation, disk reads/writes are possible\n between operations, no disk reads/writes are needed\n PostgreSQL Query Execution\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "disk",
   "access"
  ]
 },
 {
  "question": "May i have exercise about postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "List exercise of postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "I need exercise of postgresql query execution",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "exercise about postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "I want exercise of postgresql query execution",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of postgresql query execution ?",
  "answer": "Defs: src/include/executor and src/include/nodes\n Code: src/backend/executor\n PostgreSQL uses pipelining ...\n query plan is a tree of Plan nodes\n each type of node implements one kind of RA operation (node implements specific access method via iterator interface)\n node types e.g. Scan, Group, Indexscan, Sort, HashJoin\n execution is managed via a tree of PlanState nodes (mirrors the structure of the tree of Plan nodes; holds execution state)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "List exercise of postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Give me exercise about postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Do you have exercise of postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can i have exercise about postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "I need exercise of postgresql executor",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "exercise about postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "I want exercise of postgresql executor",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can you give me exercise about postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can you give me some exercise of postgresql executor ?",
  "answer": "Modules in src/backend/executor fall into two groups:\n execXXX (e.g. execMain, execProcnode, execScan)\n implement generic control of plan evaluation (execution)\n provide overall plan execution and dispatch to node iterators\n nodeXXX   (e.g. nodeSeqscan, nodeNestloop, nodeGroup)\n implement iterators for specific types of RA operators\n typically contains ExecInitXXX, ExecXXX, ExecEndXXX\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "May i have exercise about postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "List exercise of postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Give me exercise about postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Do you have exercise of postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can i have exercise about postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "I need exercise of postgresql executor",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "exercise about postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "I want exercise of postgresql executor",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can you give me exercise about postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can you give me some exercise of postgresql executor ?",
  "answer": "Much simplified view of PostgreSQL executor:\n ExecutePlan(execState, planStateNode, ...) {\n    process \"before each statement\" triggers\n    for (;;) {\n       tuple = ExecProcNode(planStateNode)\n       if (no more tuples) return END\n       check tuple validity // MVCC\n       if (got a tuple) break\n    }\n    process \"after each statement\" triggers\n    return tuple\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "May i have exercise about postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "List exercise of postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Give me exercise about postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Do you have exercise of postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can i have exercise about postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "I need exercise of postgresql executor",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "exercise about postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "I want exercise of postgresql executor",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can you give me exercise about postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "Can you give me some exercise of postgresql executor ?",
  "answer": "Executor overview (cont):\n ...\n ExecProcNode(node) {\n    switch (nodeType(node)) {\n    case SeqScan:\n       result = ExecSeqScan(node); break;\n    case NestLoop:\n       result = ExecNestLoop(node); break;\n    ...\n    }\n    return result;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "executor"
  ]
 },
 {
  "question": "May i have exercise about example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "List exercise of example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I need exercise of example postgresql execution",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "exercise about example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I want exercise of example postgresql execution",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of example postgresql execution ?",
  "answer": "Consider the query:\n -- get manager's age and # employees in Shoe department\n select e.age, d.nemps\n from   Departments d, Employees e\n where  e.name = d.manager and d.name ='Shoe'\n and its execution plan tree\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "List exercise of example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I need exercise of example postgresql execution",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "exercise about example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I want exercise of example postgresql execution",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of example postgresql execution ?",
  "answer": "The execution plan tree\n contains three nodes:\n NestedLoop with join condition (Outer.manager = Inner.name)\n IndexScan on Departments with selection (name = 'Shoe')\n SeqScan on Employees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "List exercise of example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I need exercise of example postgresql execution",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "exercise about example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I want exercise of example postgresql execution",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of example postgresql execution ?",
  "answer": "Initially InitPlan() invokes ExecInitNode() on plan tree root.\n ExecInitNode() sees a NestedLoop node ...    so dispatches to ExecInitNestLoop() to set up iterator\n    then invokes ExecInitNode() on left and right sub-plans\n        in left subPlan, ExecInitNode() sees an IndexScan node         so dispatches to ExecInitIndexScan() to set up iterator\n        in right sub-plan, ExecInitNode() sees a SeqScan node         so dispatches to ExecInitSeqScan() to set up iterator\n Result: a plan state tree with same structure as plan tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "List exercise of example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Give me exercise about example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Do you have exercise of example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can i have exercise about example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I need exercise of example postgresql execution",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "exercise about example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "I want exercise of example postgresql execution",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me exercise about example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "Can you give me some exercise of example postgresql execution ?",
  "answer": "Execution: ExecutePlan() repeatedly invokes ExecProcNode().\n ExecProcNode() sees a NestedLoop node ...    so dispatches to ExecNestedLoop() to get next tuple    which invokes ExecProcNode() on its sub-plans        in left sub-plan, ExecProcNode() sees an IndexScan node             so dispatches to ExecIndexScan() to get next tuple             if no more tuples, return END             for this tuple, invoke ExecProcNode() on right sub-plan                 ExecProcNode() sees a SeqScan node                     so dispatches to ExecSeqScan() to get next tuple                     check for match and return joined tuples if found                     continue scan until end                 reset right sub-plan iterator Result: stream of result tuples returned via ExecutePlan()\n Query Performance\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "execution"
  ]
 },
 {
  "question": "May i have exercise about performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "List exercise of performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Give me exercise about performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Do you have exercise of performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can i have exercise about performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "I need exercise of performance tuning",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "exercise about performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "I want exercise of performance tuning",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can you give me exercise about performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can you give me some exercise of performance tuning ?",
  "answer": " Good performance may involve any/all of:\n making applications using the DB run faster\n lowering response time of queries/transactions\n improving overall transaction throughput\n Remembering that, to some extent ...\n the query optimiser removes choices from DB developers\n by making its own decision on the optimal execution plan\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "May i have exercise about performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "List exercise of performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Give me exercise about performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Do you have exercise of performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can i have exercise about performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "I need exercise of performance tuning",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "exercise about performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "I want exercise of performance tuning",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can you give me exercise about performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can you give me some exercise of performance tuning ?",
  "answer": "Tuning requires us to consider the following:\n which queries and transactions will be used?   (e.g. check balance for payment, display recent transaction history)\n how frequently does each query/transaction occur?   (e.g. 90% withdrawals; 10% deposits; 50% balance check)\n are there time constraints on queries/transactions?   (e.g. EFTPOS payments must be approved within 7 seconds)\n are there uniqueness constraints on any attributes?   (define indexes on attributes to speed up insertion uniqueness check)\n how frequently do updates occur?   (indexes slow down updates, because must update table and index)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "May i have exercise about performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "List exercise of performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Give me exercise about performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Do you have exercise of performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can i have exercise about performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "I need exercise of performance tuning",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "exercise about performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "I want exercise of performance tuning",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can you give me exercise about performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "Can you give me some exercise of performance tuning ?",
  "answer": "Performance can be considered at two times:\n during schema design\n typically towards the end of schema design process\n requires schema transformations such as denormalisation\n outside schema design\n typically after application has been deployed/used\n requires adding/modifying data structures such as indexes\n Difficult to predict what query optimiser will do, so ...\n implement queries using methods which should be efficient\n observe execution behaviour and modify query accordingly\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "performance",
   "tuning"
  ]
 },
 {
  "question": "May i have exercise about postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "List exercise of postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "Give me exercise about postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "Do you have exercise of postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "Can i have exercise about postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "I need exercise of postgresql query tuning",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "exercise about postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "I want exercise of postgresql query tuning",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "Can you give me exercise about postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "Can you give me some exercise of postgresql query tuning ?",
  "answer": "PostgreSQL provides the explain statement to\n give a representation of the query execution plan\n with information that may help to tune query performance\n Usage:\n EXPLAIN [ANALYZE] Query\n Without ANALYZE, EXPLAIN shows plan with estimated costs.\n With ANALYZE, EXPLAIN executes query and prints real costs.\n Note that runtimes may show considerable variation due to buffering.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "postgresql",
   "query",
   "tuning"
  ]
 },
 {
  "question": "May i have exercise about explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "List exercise of explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "Give me exercise about explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "Do you have exercise of explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "Can i have exercise about explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "I need exercise of explain example",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "exercise about explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "I want exercise of explain example",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "Can you give me exercise about explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example ?",
  "answer": "Database\n course_enrolments(student, course, mark, grade, ...) courses(id, subject, semester, homepage) people(id, family, given, title, name, ..., birthday)\n program_enrolments(id, student, semester, program, wam, ...)\n students(id, stype)\n subjects(id, code, name, longname, uoc, offeredby, ...)\n where\n        table_name          | n_records ---------------------------+-----------\n  course_enrolments         |    525688\n  courses                   |     73220\n  people                    |     55767\n  program_enrolments        |    193456\n  students                  |     31361\n  subjects                  |     17779\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain"
  ]
 },
 {
  "question": "May i have exercise about explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "List exercise of explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "Give me exercise about explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "Do you have exercise of explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "Can i have exercise about explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "I need exercise of explain example selection on non-indexed attribute",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "exercise about explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "I want exercise of explain example selection on non-indexed attribute",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "Can you give me exercise about explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example selection on non-indexed attribute ?",
  "answer": "Example: Select on non-indexed attribute\n uni=# explain\n uni=# select * from Students where stype='local';\n                      QUERY PLAN\n ----------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n    Filter: ((stype)::text = 'local'::text)\n where\n Seq Scan = operation (plan node)\n cost=StartUpCost..TotalCost\n rows=NumberOfResultTuples\n width=SizeOfTuple (# bytes)\nMore notes on explain output:\n each major entry corresponds to a plan node\n e.g. Seq Scan,  Index Scan,  Hash Join,  Merge Join, ...\n some nodes include additional qualifying information\n e.g. Filter,  Index Cond,  Hash Cond,  Buckets, ...\n cost values in explain are estimates  (notional units)\n explain analyze also includes actual time costs (ms)\n costs of parent nodes include costs of all children\n estimates of #results based on sample of data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute"
  ]
 },
 {
  "question": "May i have exercise about explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "List exercise of explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "I need exercise of explain example selection on non-indexed attribute with actual cost",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "exercise about explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "I want exercise of explain example selection on non-indexed attribute with actual cost",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example selection on non-indexed attribute with actual cost ?",
  "answer": "Example: Select on non-indexed attribute with actual costs\n uni=# explain analyze\n uni=# select * from Students where stype='local';\n                        QUERY PLAN\n ----------------------------------------------------------\n  Seq Scan on students\n              (cost=0.00..562.01 rows=23544 width=9)\n              (actual time=0.052..5.792 rows=23551 loops=1)\n    Filter: ((stype)::text = 'local'::text)\n    Rows Removed by Filter: 7810\n  Planning time: 0.075 ms\n  Execution time: 6.978 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "non-indexed",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "List exercise of explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "I need exercise of explain example selection on indexed unique attribute with actual cost",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "I want exercise of explain example selection on indexed unique attribute with actual cost",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=100250;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using student_pkey on student\n             (cost=0.00..8.27 rows=1 width=9)\n             (actual time=0.049..0.049 rows=0 loops=1)\n    Index Cond: (id = 100250)\n  Total runtime: 0.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "List exercise of explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "I need exercise of explain example selection on indexed unique attribute with actual cost",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "I want exercise of explain example selection on indexed unique attribute with actual cost",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example selection on indexed unique attribute with actual cost ?",
  "answer": "Example: Select on indexed, unique attribute\n uni=# explain analyze\n uni-# select * from Students where id=1216988;\n                        QUERY PLAN\n -------------------------------------------------------\n  Index Scan using students_pkey on students\n                   (cost=0.29..8.30 rows=1 width=9)\n                   (actual time=0.011..0.012 rows=1 loops=1)\n    Index Cond: (id = 1216988)\n  Planning time: 0.066 ms\n  Execution time: 0.026 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "selection",
   "on",
   "indexed",
   "unique",
   "attribute",
   "with",
   "actual",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "List exercise of explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Give me exercise about explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Do you have exercise of explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Can i have exercise about explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "I need exercise of explain example join on indexed attribute 2016",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "exercise about explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "I want exercise of explain example join on indexed attribute 2016",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Can you give me exercise about explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example join on indexed attribute 2016 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2016)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Hash Join (cost=988.58..3112.76 rows=31048 width=19)\n           (actual time=11.504..39.478 rows=31048 loops=1)\n   Hash Cond: (p.id = s.id)\n   -> Seq Scan on people p\n          (cost=0.00..989.97 rows=36497 width=19)\n          (actual time=0.016..8.312 rows=36497 loops=1)\n   -> Hash (cost=478.48..478.48 rows=31048 width=4)\n           (actual time=10.532..10.532 rows=31048 loops=1)\n           Buckets: 4096  Batches: 2  Memory Usage: 548kB\n       ->  Seq Scan on students s               (cost=0.00..478.48 rows=31048 width=4)\n               (actual time=0.005..4.630 rows=31048 loops=1)\n Total runtime: 41.0 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "May i have exercise about explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "List exercise of explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Give me exercise about explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Do you have exercise of explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can i have exercise about explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "I need exercise of explain example join on indexed attribute 2018",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "exercise about explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "I want exercise of explain example join on indexed attribute 2018",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can you give me exercise about explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example join on indexed attribute 2018 ?",
  "answer": "Example: Join on a primary key (indexed) attribute  (2018)\n uni=# explain analyze\n uni-# select s.id,p.name\n uni-# from Students s, People p where s.id=p.id;\n                       QUERY PLAN\n ----------------------------------------------------------\n Merge Join  (cost=0.58..2829.25 rows=31361 width=18)\n             (actual time=0.044..25.883 rows=31361 loops=1)\n   Merge Cond: (s.id = p.id)\n   ->  Index Only Scan using students_pkey on students s\n             (cost=0.29..995.70 rows=31361 width=4)\n             (actual time=0.033..6.195 rows=31361 loops=1)\n         Heap Fetches: 31361\n   ->  Index Scan using people_pkey on people p\n             (cost=0.29..2434.49 rows=55767 width=18)\n             (actual time=0.006..6.662 rows=31361 loops=1)\n Planning time: 0.259 ms\n Execution time: 27.327 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "May i have exercise about explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "List exercise of explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Give me exercise about explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Do you have exercise of explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Can i have exercise about explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "I need exercise of explain example join on non-indexed attribute 2016",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "exercise about explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "I want exercise of explain example join on non-indexed attribute 2016",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Can you give me exercise about explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example join on non-indexed attribute 2016 ?",
  "answer": "Example: Join on a non-indexed attribute  (2016)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni=# where s1.offeredBy=s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Merge Join (cost=4449.13..121322.06 rows=7785262 width=18)\n            (actual time=29.787..2377.707 rows=8039979 loops=1)\n  Merge Cond: (s1.offeredby = s2.offeredby)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=14.251..18.703 rows=18570 loops=1)\n      Sort Key: s1.offeredby\n      Sort Method: external merge  Disk: 472kB\n      ->  Seq Scan on subjects s1\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.005..4.542 rows=18799 loops=1)\n  ->  Sort (cost=2224.57..2271.56 rows=18799 width=13)\n           (actual time=15.532..1100.396 rows=8039980 loops=1)\n      Sort Key: s2.offeredby\n      Sort Method: external sort  Disk: 552kB\n      ->  Seq Scan on subjects s2\n              (cost=0.00..889.99 rows=18799 width=13)\n              (actual time=0.002..3.579 rows=18799 loops=1)\n Total runtime: 2767.1 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2016"
  ]
 },
 {
  "question": "May i have exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "List exercise of explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Give me exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Do you have exercise of explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can i have exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "I need exercise of explain example join on non-indexed attribute 2018",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "I want exercise of explain example join on non-indexed attribute 2018",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can you give me exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..108351.87 rows=7113299 width=18)\n            (actual time=8.966..903.441 rows=7328594 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   ->  Seq Scan on subjects s1\n           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.013..2.861 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=8.667..8.667 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.009..4.677 rows=17779 loops=1)\n Planning time: 0.255 ms\n Execution time: 1191.023 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "May i have exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "List exercise of explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Give me exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Do you have exercise of explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can i have exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "I need exercise of explain example join on non-indexed attribute 2018",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "I want exercise of explain example join on non-indexed attribute 2018",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can you give me exercise about explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "Can you give me some exercise of explain example join on non-indexed attribute 2018 ?",
  "answer": "Example: Join on a non-indexed attribute  (2018)\n uni=# explain analyze\n uni=# select s1.code, s2.code\n uni-# from Subjects s1, Subjects s2\n uni-# where s1.offeredBy = s2.offeredBy and s1.code < s2.code;\n                         QUERY PLAN\n ---------------------------------------------------------------\n Hash Join  (cost=1286.03..126135.12 rows=2371100 width=18)\n            (actual time=7.356..6806.042 rows=3655437 loops=1)\n   Hash Cond: (s1.offeredby = s2.offeredby)\n   Join Filter: (s1.code < s2.code)\n   Rows Removed by Join Filter: 3673157\n   ->  Seq Scan on subjects s1           (cost=0.00..1063.79 rows=17779 width=13)\n           (actual time=0.009..4.602 rows=17779 loops=1)\n   ->  Hash  (cost=1063.79..1063.79 rows=17779 width=13)\n             (actual time=7.301..7.301 rows=17720 loops=1)\n         Buckets: 32768  Batches: 1  Memory Usage: 1087kB\n         ->  Seq Scan on subjects s2\n                 (cost=0.00..1063.79 rows=17779 width=13)\n                 (actual time=0.005..4.452 rows=17779 loops=1)\n Planning time: 0.159 ms\n Execution time: 6949.167 ms\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "explain",
   "join",
   "on",
   "non-indexed",
   "attribute",
   "2018"
  ]
 },
 {
  "question": "May i have exercise about exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "List exercise of exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "Give me exercise about exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "Do you have exercise of exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "Can i have exercise about exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "I need exercise of exercise 4 explain example",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "exercise about exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "I want exercise of exercise 4 explain example",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 4 explain example ?",
  "answer": "Using the database described earlier ...\n Course_enrolments(student, course, mark, grade, ...)\n Courses(id, subject, semester, homepage)\n People(id, family, given, title, name, ..., birthday)\n Program_enrolments(id, student, semester, program, wam, ...)\n Students(id, stype)\n Subjects(id, code, name, longname, uoc, offeredby, ...)\n create view EnrolmentCounts as\n  select s.code, c.semester, count(e.student) as nstudes\n    from Courses c join Subjects s on c.subject=s.id\n         join Course_enrolments e on e.course = c.id\n   group by s.code, c.semester;\n predict how each of the following queries will be executed ...\n Check your prediction using the EXPLAIN ANALYZE command.\n 1. select max(birthday) from People\n 2. select max(id) from People\n 3. select family from People order by family\n 4. select distinct p.id, pname from People s, CourseEnrolments e where s.id=e.student and e.grade='FL'\n 5. select * from EnrolmentCounts where code='COMP9315';\n Examine the effect of adding ORDER BY and DISTINCT.\n Add indexes to improve the speed of slow queries.\n Transaction Processing\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "4",
   "explain"
  ]
 },
 {
  "question": "May i have exercise about transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "List exercise of transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Give me exercise about transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Do you have exercise of transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can i have exercise about transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I need exercise of transaction processing",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "exercise about transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I want exercise of transaction processing",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me exercise about transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction processing ?",
  "answer": "Transaction (tx) = application-level atomic op, multiple DB ops\n Concurrent transactions are\n desirable, for improved performance\n problematic, because of potential unwanted interactions\n To ensure problem-free concurrent transactions:\n Atomic ... whole effect of tx, or nothing\n Consistent ... individual tx's are \"correct\" (wrt application)\n Isolated ... each tx behaves as if no concurrency\n Durable ... effects of committed tx's persist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "May i have exercise about transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "List exercise of transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Give me exercise about transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Do you have exercise of transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can i have exercise about transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I need exercise of transaction processing",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "exercise about transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I want exercise of transaction processing",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me exercise about transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction processing ?",
  "answer": "Transaction states:\n COMMIT \u21d2 all changes preserved,   ABORT \u21d2 database unchanged\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "May i have exercise about transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "List exercise of transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Give me exercise about transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Do you have exercise of transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can i have exercise about transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I need exercise of transaction processing",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "exercise about transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I want exercise of transaction processing",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me exercise about transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction processing ?",
  "answer": "Transaction processing:\n the study of techniques for realising ACID properties\n Consistency is the property:\n a tx is correct with respect to its own specification\n a tx performs a mapping that maintains all DB constraints\n Ensuring this must be left to application programmers.\n Our discussion focusses on: Atomicity, Durability, Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "May i have exercise about transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "List exercise of transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Give me exercise about transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Do you have exercise of transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can i have exercise about transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I need exercise of transaction processing",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "exercise about transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I want exercise of transaction processing",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me exercise about transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction processing ?",
  "answer": "Atomicity is handled by the commit and abort mechanisms\n commit ends tx and ensures all changes are saved\n abort ends tx and undoes changes \"already made\"\n Durability is handled by implementing stable storage, via\n redundancy, to deal with hardware failures\n logging/checkpoint mechanisms, to recover state\n Isolation is handled by concurrency control mechanisms\n two possibilities: lock-based, timestamp-based\n various levels of isolation are possible (e.g. serializable)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "May i have exercise about transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "List exercise of transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Give me exercise about transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Do you have exercise of transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can i have exercise about transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I need exercise of transaction processing",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "exercise about transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "I want exercise of transaction processing",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me exercise about transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction processing ?",
  "answer": "Where transaction processing fits in the DBMS:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "processing"
  ]
 },
 {
  "question": "May i have exercise about transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "List exercise of transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Give me exercise about transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Do you have exercise of transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can i have exercise about transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "I need exercise of transaction terminology",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "exercise about transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "I want exercise of transaction terminology",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can you give me exercise about transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction terminology ?",
  "answer": "To describe transaction effects, we consider:\n READ - transfer data from \"disk\" to memory\n WRITE - transfer data from memory to \"disk\"\n ABORT - terminate transaction, unsuccessfully\n COMMIT - terminate transaction, successfully\n Relationship between the above operations and SQL:\n SELECT produces READ operations on the database\n UPDATE and DELETE produce READ then WRITE operations\n INSERT produces WRITE operations\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "May i have exercise about transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "List exercise of transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Give me exercise about transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Do you have exercise of transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can i have exercise about transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "I need exercise of transaction terminology",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "exercise about transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "I want exercise of transaction terminology",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can you give me exercise about transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction terminology ?",
  "answer": "More on transactions and SQL\n BEGIN starts a transaction\n the begin keyword in PLpgSQL is not the same thing\n COMMIT commits and ends the current transaction\n some DBMSs e.g. PostgreSQL also provide END as a synonym\n the end keyword in PLpgSQL is not the same thing\n ROLLBACK aborts the current transaction, undoing any changes\n some DBMSs e.g. PostgreSQL also provide ABORT as a synonym\n In PostgreSQL, tx's cannot be defined inside stored procedures (e.g. PLpgSQL)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "May i have exercise about transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "List exercise of transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Give me exercise about transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Do you have exercise of transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can i have exercise about transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "I need exercise of transaction terminology",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "exercise about transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "I want exercise of transaction terminology",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can you give me exercise about transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction terminology ?",
  "answer": "The READ, WRITE, ABORT, COMMIT operations:\n occur in the context of some transaction T\n involve manipulation of data items X, Y, ...   (READ and WRITE)\n The operations are typically denoted as:\n RT(X) read item X in transaction T\n WT(X) write item X in transaction T\n AT abort transaction T\n CT commit transaction T\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "terminology"
  ]
 },
 {
  "question": "May i have exercise about schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "List exercise of schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Give me exercise about schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Do you have exercise of schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Can i have exercise about schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "I need exercise of schedule",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "exercise about schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "I want exercise of schedule",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Can you give me exercise about schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Can you give me some exercise of schedule ?",
  "answer": "A schedule gives the sequence of operations from \u2265 1 tx\n Serial schedule for a set of tx's T1 .. Tn\n all operations of Ti complete before Ti+1 begins\n E.g.   RT1(A)   WT1(A)   RT2(B)   RT2(A)   WT3(C)   WT3(B)  Concurrent schedule for a set of tx's T1 .. Tn\n operations from individual Ti's are interleaved\n E.g.   RT1(A)   RT2(B)   WT1(A)   WT3(C)   WT3(B)   RT2(A) ",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "May i have exercise about schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "List exercise of schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Give me exercise about schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Do you have exercise of schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Can i have exercise about schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "I need exercise of schedule",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "exercise about schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "I want exercise of schedule",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Can you give me exercise about schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "Can you give me some exercise of schedule ?",
  "answer": "Serial schedules guarantee database consistency\n each Ti  commits before Ti+1\n prior to Ti  database is consistent\n after Ti  database is consistent   (assuming Ti is correct)\n before Ti+1  database is consistent ...\n Concurrent schedules interleave operations arbitrarily\n and may produce a database that is not consistent\n after all of the transactions have committed\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "schedule"
  ]
 },
 {
  "question": "May i have exercise about transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "List exercise of transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Give me exercise about transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Do you have exercise of transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can i have exercise about transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I need exercise of transaction anomaly",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "exercise about transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I want exercise of transaction anomaly",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me exercise about transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction anomaly ?",
  "answer": " The set of phenomena can be characterised broadly under:\n dirty read: reading data item currently in use by another tx\n nonrepeateable read: re-reading data item, since changed by another tx\n phantom read: re-reading result set, since changed by another tx\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "May i have exercise about transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "List exercise of transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Give me exercise about transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Do you have exercise of transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can i have exercise about transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I need exercise of transaction anomaly",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "exercise about transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I want exercise of transaction anomaly",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me exercise about transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction anomaly ?",
  "answer": "Dirty read: a transaction reads data written by a concurrent uncommitted transaction\n Example:\n      Transaction T1       Transaction T2\n (1)  select a into X\n      from R where id=1\n (2)                       select a into Y\n                           from R where id=1\n (3)  update R set a=X+1\n      where id=1\n (4)  commit\n (5)                       update R set a=Y+1\n                           where id=1\n (6)                       commit\n Effect: T1's update on R.a is lost.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "May i have exercise about transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "List exercise of transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Give me exercise about transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Do you have exercise of transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can i have exercise about transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I need exercise of transaction anomaly",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "exercise about transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I want exercise of transaction anomaly",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me exercise about transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction anomaly ?",
  "answer": "Nonrepeatable read: a transaction re-reads data it has previously read and finds that data has been modified by another transaction\n (that committed since the initial read)\n Example:\n      Transaction T1    Transaction T2\n (1)  select * from R\n      where id=5\n (2)                    update R set a=8\n                        where id=5\n (3)                    commit\n (4)  select * from R\n      where id=5\n Effect: T1 runs same query twice; sees different data\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "May i have exercise about transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "List exercise of transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Give me exercise about transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Do you have exercise of transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can i have exercise about transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I need exercise of transaction anomaly",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "exercise about transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "I want exercise of transaction anomaly",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me exercise about transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction anomaly ?",
  "answer": "Phantom read: a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows\n satisfying the condition has changed due to another recently-committed transaction\n Example:\n      Transaction T1    Transaction T2\n (1)  select count(*)\n      from R where a=5\n (2)                    insert into R(id,a,b)\n                               values (2,5,8)\n (3)                    commit\n (4)  select count(*)\n      from R where a=5\n Effect: T1 runs same query twice; sees different result set\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "anomaly"
  ]
 },
 {
  "question": "May i have exercise about example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "List exercise of example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Give me exercise about example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Do you have exercise of example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Can i have exercise about example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "I need exercise of example of transaction failure",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "exercise about example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "I want exercise of example of transaction failure",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Can you give me exercise about example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Can you give me some exercise of example of transaction failure ?",
  "answer": "Above examples assumed that all transactions commit.\n Additional problems can arise when transactions abort.\n Consider the following schedule where transaction T1 fails:\n T1: R(X) W(X) A\n T2:             R(X) W(X) C\n Abort will rollback the changes to X, but ...\n Consider three places where rollback might occur:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "May i have exercise about example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "List exercise of example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Give me exercise about example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Do you have exercise of example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Can i have exercise about example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "I need exercise of example of transaction failure",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "exercise about example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "I want exercise of example of transaction failure",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Can you give me exercise about example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "Can you give me some exercise of example of transaction failure ?",
  "answer": "Abort / rollback scenarios:\n T1: R(X) W(X) A [1]     [2]        [3]\n T2:                 R(X)    W(X) C\n Case [1] is ok\n all effects of T1 vanish; final effect is simply from T2\n Case [2] is problematic\n some of T1's effects persist, even though T1 aborted\n Case [3] is also problematic\n T2's effects are lost, even though T2 committed\n Transaction Isolation\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "of",
   "transaction",
   "failure"
  ]
 },
 {
  "question": "May i have exercise about transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "List exercise of transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "Give me exercise about transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "Do you have exercise of transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "Can i have exercise about transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "I need exercise of transaction isolation",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "exercise about transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "I want exercise of transaction isolation",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "Can you give me exercise about transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction isolation ?",
  "answer": "Simplest form of isolation: serial execution   (T1 ; T2 ; T3 ; ...)\n Problem: serial execution yields poor throughput.\n Concurrency control schemes (CCSs) aim for \"safe\" concurrency\n Abstract view of DBMS concurrency mechanisms:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation"
  ]
 },
 {
  "question": "May i have exercise about serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "List exercise of serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Give me exercise about serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Do you have exercise of serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Can i have exercise about serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "I need exercise of serializability",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "exercise about serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "I want exercise of serializability",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Can you give me exercise about serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Can you give me some exercise of serializability ?",
  "answer": "Consider two schedules S1 and S2 produced by\n executing the same set of transactions T1..Tn concurrently\n but with a non-serial interleaving of R/W operations\n S1 and S2 are equivalent if StateAfter(S1)  =  StateAfter(S2) i.e. final state yielded by S1 is same as final state yielded by S2\n S is a serializable schedule (for a set of concurrent tx's T1 ..Tn) if\n S is equivalent to some serial schedule Ss of T1 ..Tn\n Under these circumstances, consistency is guaranteed (assuming no aborted transactions and no system failures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "May i have exercise about serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "List exercise of serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Give me exercise about serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Do you have exercise of serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Can i have exercise about serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "I need exercise of serializability",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "exercise about serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "I want exercise of serializability",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Can you give me exercise about serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "Can you give me some exercise of serializability ?",
  "answer": "Two formulations of serializability:\n conflict serializibility\n i.e. conflicting R/W operations occur in the \"right order\"\n check via precedence graph; look for absence of cycles\n view serializibility\n i.e. read operations see the correct version of data\n checked via VS conditions on likely equivalent schedules\n View serializability is strictly weaker than conflict serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "serializability"
  ]
 },
 {
  "question": "May i have exercise about exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "List exercise of exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "Give me exercise about exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "Do you have exercise of exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "Can i have exercise about exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "I need exercise of exercise 5 serializability checking",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "exercise about exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "I want exercise of exercise 5 serializability checking",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 5 serializability checking ?",
  "answer": "Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)                    W(A)\n T3:                    R(A)        W(A)\n Is the following schedule view/conflict serializable?\n T1:        W(B)  W(A)\n T2:  R(B)              W(A)\n T3:                          R(A)  W(A)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "serializability",
   "checking"
  ]
 },
 {
  "question": "May i have exercise about transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "List exercise of transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Give me exercise about transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Do you have exercise of transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can i have exercise about transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I need exercise of transaction isolation level",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "exercise about transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I want exercise of transaction isolation level",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me exercise about transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction isolation level ?",
  "answer": "SQL programmers' concurrency control mechanism ...\n set transaction\n     read only  -- so weaker isolation may be ok\n     read write -- suggests stronger isolation needed\n isolation level\n     -- weakest isolation, maximum concurrency\n     read uncommitted\n     read committed\n     repeatable read\n     serializable\n     -- strongest isolation, minimum concurrency\n Applies to current tx only; affects how scheduler treats this tx.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "May i have exercise about transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "List exercise of transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Give me exercise about transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Do you have exercise of transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can i have exercise about transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I need exercise of transaction isolation level",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "exercise about transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I want exercise of transaction isolation level",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me exercise about transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction isolation level ?",
  "answer": "Implication of transaction isolation levels:\n Isolation Dirty Nonrepeatable Phantom\n Level Read Read Read\n Read\n Uncommitted Possible Possible Possible\n Read\n Committed Not Possible Possible Possible\n Repeatable\n Read Not Possible Not Possible Possible\n Serializable Not Possible Not Possible Not Possible\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "May i have exercise about transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "List exercise of transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Give me exercise about transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Do you have exercise of transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can i have exercise about transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I need exercise of transaction isolation level",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "exercise about transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I want exercise of transaction isolation level",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me exercise about transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction isolation level ?",
  "answer": "For transaction isolation, PostgreSQL\n provides syntax for all four levels\n treats read uncommitted as read committed\n repeatable read behaves like serializable\n default level is read committed\n Note: cannot implement read uncommitted because of MVCC\n For more details, see PostgreSQL Documentation section 13.2\n extensive discussion of semantics of UPDATE, INSERT, DELETE\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "May i have exercise about transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "List exercise of transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Give me exercise about transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Do you have exercise of transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can i have exercise about transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I need exercise of transaction isolation level",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "exercise about transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I want exercise of transaction isolation level",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me exercise about transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction isolation level ?",
  "answer": "A PostgreSQL tx consists of a sequence of SQL statements:\n BEGIN S1; S2; ... Sn; COMMIT;\n Isolation levels affect view of DB provided to each Si:\n in read committed ...\n each Si sees snapshot of DB at start of Si\n in repeatable read and serializable ...\n each Si sees snapshot of DB at start of tx\n serializable checks for extra conditions\n Transactions fail if the system detects violation of isolation level.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "May i have exercise about transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "List exercise of transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Give me exercise about transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Do you have exercise of transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can i have exercise about transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I need exercise of transaction isolation level",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "exercise about transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "I want exercise of transaction isolation level",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me exercise about transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "Can you give me some exercise of transaction isolation level ?",
  "answer": "Example of repeatable read vs serializable\n table R(class,value) containing (1,10) (1,20) (2,100) (2,200)\n T1: X = sum(value) where class=1; insert R(2,X); commit\n T2: X = sum(value) where class=2; insert R(1,X); commit\n with repeatable read, both transactions commit, giving\n updated table: (1,10) (1,20) (2,100) (2,200) (1,300) (2,30)\n with serial transactions, only one transaction commits\n T1;T2 gives (1,10) (1,20) (2,100) (2,200) (2,30) (1,330)\n T2;T1 gives (1,10) (1,20) (2,100) (2,200) (1,300) (2,330)\n PG recognises that committing both gives serialization violation\n Implementing Concurrency Control\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "transaction",
   "isolation",
   "level"
  ]
 },
 {
  "question": "May i have exercise about concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of concurrency control",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of concurrency control",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of concurrency control ?",
  "answer": "Approaches to concurrency control:\n Lock-based\n Synchronise tx execution via locks on relevant part of DB.\n Version-based   (multi-version concurrency control)\n Allow multiple consistent versions of the data to exist. Each tx has access only to version existing at start of tx.\n Validation-based   (optimistic concurrency control)\n Execute all tx's; check for validity problems on commit.\n Timestamp-based\n Organise tx execution via timestamps assigned to actions.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of lock-based concurrency control",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of lock-based concurrency control",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of lock-based concurrency control ?",
  "answer": "Locks introduce additional mechanisms in DBMS:\n The Lock Manager\n manages the locks requested by the scheduler\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of lock-based concurrency control",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of lock-based concurrency control",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of lock-based concurrency control ?",
  "answer": "Lock table entries contain:\n object being locked   (DB, table, tuple, field)\n type of lock: read/shared, write/exclusive\n FIFO queue of tx's requesting this lock\n count of tx's currently holding lock   (max 1 for write locks)\n Lock and unlock operations must be atomic.\n Lock upgrade:\n if a tx holds a read lock, and it is the only tx holding that lock\n then the lock can be converted into a write lock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of lock-based concurrency control",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of lock-based concurrency control",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of lock-based concurrency control ?",
  "answer": "Synchronise access to shared data items via following rules:\n before reading X, get read (shared) lock on X\n before writing X, get write (exclusive) lock on X\n a tx attempting to get a read lock on X is blocked if another tx already has write lock on X\n a tx attempting to get an write lock on X is blocked if another tx has any kind of lock on X\n These rules alone do not guarantee serializability.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of lock-based concurrency control",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of lock-based concurrency control",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of lock-based concurrency control ?",
  "answer": "Consider the following schedule, using locks:\n T1(a): Lr(Y)     R(Y)           continued\n T2(a):      Lr(X)    R(X) U(X)  continued\n T1(b):      U(Y)         Lw(X) W(X) U(X)\n T2(b): Lw(Y)....W(Y) U(Y)\n (where Lr = read-lock, Lw = write-lock, U = unlock)\n Locks correctly ensure controlled access to X and Y.\n Despite this, the schedule is not serializable.  (Ex: prove this)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "lock-based",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "List exercise of two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "Give me exercise about two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "Do you have exercise of two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "Can i have exercise about two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "I need exercise of two-phase locking",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "exercise about two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "I want exercise of two-phase locking",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "Can you give me exercise about two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "Can you give me some exercise of two-phase locking ?",
  "answer": "To guarantee serializability, we require an additional constraint:\n in every tx, all lock requests precede all unlock requests\n Each transaction is then structured as:\n growing phase where locks are acquired\n action phase where \"real work\" is done\n shrinking phase where locks are released\n Clearly, this reduces potential concurrency ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "two-phase",
   "locking"
  ]
 },
 {
  "question": "May i have exercise about problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "List exercise of problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "Give me exercise about problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "Do you have exercise of problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "Can i have exercise about problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "I need exercise of problem with locking",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "exercise about problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "I want exercise of problem with locking",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "Can you give me exercise about problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "Can you give me some exercise of problem with locking ?",
  "answer": "Appropriate locking can guarantee correctness.\n However, it also introduces potential undesirable effects:\n Deadlock\n No transactions can proceed; each waiting on lock held by another.\n Starvation\n One transaction is permanently \"frozen out\" of access to data.\n Reduced performance\n Locking introduces delays while waiting for locks to be released.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "problem",
   "with",
   "locking"
  ]
 },
 {
  "question": "May i have exercise about deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "List exercise of deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Give me exercise about deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Do you have exercise of deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can i have exercise about deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I need exercise of deadlock",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "exercise about deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I want exercise of deadlock",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me exercise about deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me some exercise of deadlock ?",
  "answer": "Deadlock occurs when two transactions are waiting for a lock on an item held by the other.\n Example:\n T1: Lw(A) R(A)            Lw(B) ......\n T2:            Lw(B) R(B)       Lw(A) .....\n How to deal with deadlock?\n prevent it happening in the first place\n let it happen, detect it, recover from it\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "May i have exercise about deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "List exercise of deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Give me exercise about deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Do you have exercise of deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can i have exercise about deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I need exercise of deadlock",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "exercise about deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I want exercise of deadlock",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me exercise about deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me some exercise of deadlock ?",
  "answer": "Handling deadlock involves forcing a transaction to \"back off\".\n select process to \"back off\"\n choose on basis of how far transaction has progressed, # locks held, ...\n roll back the selected process\n how far does this it need to be rolled back? (less roll-back is better)\n worst-case scenario: abort one transaction\n prevent starvation\n need methods to ensure that same transaction isn't always chosen\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "May i have exercise about deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "List exercise of deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Give me exercise about deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Do you have exercise of deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can i have exercise about deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I need exercise of deadlock",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "exercise about deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I want exercise of deadlock",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me exercise about deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me some exercise of deadlock ?",
  "answer": "Methods for managing deadlock\n timeout : set max time limit for each tx\n waits-for graph : records Tj waiting on lock held by Tk\n prevent deadlock by checking for new cycle \u21d2 abort Ti\n detect deadlock by periodic check for cycles \u21d2 abort Ti\n timestamps : use tx start times as basis for priority\n scenario: Tj tries to get lock held by Tk ...\n wait-die: if Tj < Tk, then Tj waits, else Tj rolls back\n wound-wait: if Tj < Tk, then Tk rolls back, else Tj waits\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "May i have exercise about deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "List exercise of deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Give me exercise about deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Do you have exercise of deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can i have exercise about deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I need exercise of deadlock",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "exercise about deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "I want exercise of deadlock",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me exercise about deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "Can you give me some exercise of deadlock ?",
  "answer": "Properties of deadlock handling methods:\n both wait-die and wound-wait are fair\n wait-die tends to\n roll back tx's that have done little work\n but rolls back tx's more often\n wound-wait tends to\n roll back tx's that may have done significant work\n but rolls back tx's less often\n timestamps easier to implement than waits-for graph\n waits-for minimises roll backs because of deadlock\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deadlock"
  ]
 },
 {
  "question": "May i have exercise about exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "List exercise of exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "Give me exercise about exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "Do you have exercise of exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "Can i have exercise about exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "I need exercise of exercise 6 deadlock handling",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "exercise about exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "I want exercise of exercise 6 deadlock handling",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 6 deadlock handling ?",
  "answer": "Consider the following schedule on four transactions:\n T1:  R(A)        W(C)                                W(D)\n T2:        R(B)                          W(C)\n T3:                    R(D)        W(B)\n T4:                          R(E)              W(A)\n Assume that: each R acquires a shared lock; each W uses an exclusive lock; two-phase locking is used.\n Show how the wait-for graph for the locks evolves.\n Show how any deadlocks might be resolved via this graph.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "6",
   "deadlock",
   "handling"
  ]
 },
 {
  "question": "May i have exercise about optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of optimistic concurrency control",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of optimistic concurrency control",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of optimistic concurrency control ?",
  "answer": "Locking is a pessimistic approach to concurrency control:\n limit concurrency to ensure that conflicts don't occur\n Costs: lock management, deadlock handling, contention.\n In scenarios where there are far more reads than writes ...\n don't lock (allow arbitrary interleaving of operations)\n check just before commit that no conflicts occurred\n if problems, roll back conflicting transactions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of optimistic concurrency control",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of optimistic concurrency control",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of optimistic concurrency control ?",
  "answer": "Transactions have three distinct phases:\n Reading: read from database, modify local copies of data\n Validation: check for conflicts in updates\n Writing: commit local copies of data to database\n Timestamps are recorded at points noted:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of optimistic concurrency control",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of optimistic concurrency control",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of optimistic concurrency control ?",
  "answer": "Data structures needed for validation:\n A ... set of txs that are reading data and computing results\n V ... set of txs that have reached validation (not yet committed)\n F ... set of txs that have finished (committed data to storage)\n for each Ti,  timestamps for when it reached A, V, F\n R(Ti) set of all data items read by Ti\n W(Ti) set of all data items to be written by Ti\n Use the V timestamps as ordering for transactions\n assume serial tx order based on ordering of V(Ti)'s\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of optimistic concurrency control",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of optimistic concurrency control",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of optimistic concurrency control ?",
  "answer": "Validation check for transaction T\n for all transactions Ti  \u2260  T\n if V(Ti) < A(T) < F(Ti), then check W(Ti) \u2229 R(T) is empty\n if V(Ti) < V(T) < F(Ti), then check W(Ti) \u2229 W(T) is empty\n If this check fails for any Ti, then T is rolled back.\n Prevents: T reading dirty data, T overwriting Ti's changes\n Problems: rolls back \"complete\" tx's, cost to maintain A,V,F sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimistic",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of multi-version concurrency control",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of multi-version concurrency control",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-version concurrency control ?",
  "answer": "Multi-version concurrency control (MVCC) aims to\n retain benefits of locking, while getting more concurrency\n by providing multiple (consistent) versions of data items\n Achieves this by\n readers access an \"appropriate\" version of each data item\n writers make new versions of the data items they modify\n Main difference between MVCC and standard locking:\n read locks do not conflict with write locks \u21d2\n reading never blocks writing, writing never blocks reading\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of multi-version concurrency control",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of multi-version concurrency control",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-version concurrency control ?",
  "answer": "WTS = timestamp of last writer; RTS = timestamp of last reader\n Chained tuple versions:   tupoldest \u2192 tupolder \u2192 tupnewest\n When a reader Ti is accessing the database\n ignore any data item D created after Ti started (WTS(D) > TS(Ti))\n use only newest version V satisfying WTS(V) < TS(Ti)\n When a writer Tj attempts to change a data item\n find newest version V satisfying WTS(V) < TS(Tj)\n if no later versions exist, create new version of data item\n otherwise, abort Tj\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of multi-version concurrency control",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of multi-version concurrency control",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-version concurrency control ?",
  "answer": "Advantage of MVCC\n locking needed for serializability considerably reduced\n Disadvantages of MVCC\n visibility-check overhead (on every tuple read/write)\n reading an item V causes an update of RTS(V)\n storage overhead for extra versions of data items\n overhead in removing out-of-date versions of data items\n Despite apparent disadvantages, MVCC is very effective.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "List exercise of multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Give me exercise about multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Do you have exercise of multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can i have exercise about multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I need exercise of multi-version concurrency control",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "exercise about multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "I want exercise of multi-version concurrency control",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me exercise about multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-version concurrency control ?",
  "answer": "Removing old versions:\n Vj and Vk are versions of same item\n WTS(Vj) and WTS(Vk) precede TS(Ti) for all Ti\n remove version with smaller WTS(Vx) value\n When to make this check?\n every time a new version of a data item is added?\n periodically, with fast access to blocks of data\n PostgreSQL uses the latter (vacuum).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-version",
   "concurrency",
   "control"
  ]
 },
 {
  "question": "May i have exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of concurrency control in postgresql",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of concurrency control in postgresql",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of concurrency control in postgresql ?",
  "answer": "PostgreSQL uses two styles of concurrency control:\n multi-version concurrency control (MVCC) (used in implementing SQL DML statements (e.g. select))\n two-phase locking (2PL) (used in implementing SQL DDL statements (e.g. create table))\n From the SQL (PLpgSQL) level:\n can let the lock/MVCC system handle concurrency\n can handle it explicitly via LOCK statements\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of concurrency control in postgresql",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of concurrency control in postgresql",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of concurrency control in postgresql ?",
  "answer": "PostgreSQL provides read committed and serializable isolation levels.\n Using the serializable isolation level, a select:\n sees only data committed before the transaction began\n never sees changes made by concurrent transactions\n Using the serializable isolation level, an update fails:\n if it tries to modify an \"active\" data item (active = affected by some other tx, either committed or uncommitted)\n The transaction containing the update must then rollback and re-start.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of concurrency control in postgresql",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of concurrency control in postgresql",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of concurrency control in postgresql ?",
  "answer": "Implementing MVCC in PostgreSQL requires:\n a log file to maintain current status of each Ti\n in every tuple:\n xmin ID of the tx that created the tuple\n xmax ID of the tx that replaced/deleted the tuple (if any)\n xnew link to newer versions of tuple (if any)\n for each transaction Ti :\n a transaction ID (timestamp)\n SnapshotData: list of active tx's when Ti started\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of concurrency control in postgresql",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of concurrency control in postgresql",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of concurrency control in postgresql ?",
  "answer": "Rules for a tuple to be visible to Ti :\n the xmin (creation transaction) value must\n be committed in the log file\n have started before Ti's start time\n not be active at Ti's start time\n the xmax (delete/replace transaction) value must\n be blank or refer to an aborted tx, or\n have started after Ti's start time, or\n have been active at SnapshotData time\n For details, see: utils/time/tqual.c\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of concurrency control in postgresql",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of concurrency control in postgresql",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of concurrency control in postgresql ?",
  "answer": "Tx's always see a consistent version of the database.\n But may not see the \"current\" version of the database.\n E.g. T1 does select, then concurrent T2 deletes some of T1's selected tuples\n This is OK unless tx's communicate outside the database system.\n E.g. T1 counts tuples while T2 deletes then counts; then counts are compared\n Use locks if application needs every tx to see same current version\n LOCK TABLE locks an entire table\n SELECT FOR UPDATE locks only the selected rows\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "concurrency",
   "control",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of exercise 7 locking in postgresql",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of exercise 7 locking in postgresql",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 7 locking in postgresql ?",
  "answer": " create or replace function\n     allocSeat(paxID int, fltID int, seat text)\n     returns boolean\n as $$\n declare\n     pid int;\n begin\n     select paxID into pid from SeatingAlloc\n     where  flightID = fltID and seatNum = seat;\n     if (pid is not null) then\n         return false;  -- someone else already has seat\n     else\n         update SeatingAlloc set pax = paxID\n         where  flightID = fltID and seatNum = seat;\n         commit;\n         return true;\n     end if;\n end;\n $$ langauge plpgsql;\n Produced: 13 Sep 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "7",
   "locking",
   "in",
   "postgresql"
  ]
 }
]