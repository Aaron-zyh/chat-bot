[
 {
  "question": "May i have example of week 9 lecture ?",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "List example about week 9 lecture ?",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "Give me example of week 9 lecture ?",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "Do you have example about week 9 lecture ?",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "Can i have example of week 9 lecture ?",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "example about week 9 lecture ?",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "I want example of week 9 lecture",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "Can you give me example about week 9 lecture ?",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "I need example of week 9 lecture",
  "answer": "About Assignment 2 and Atomicity Durability",
  "intent": "example",
  "key_words": [
   "example",
   "lecture",
   "week 9"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Implement a signature-based filtering scheme\n using superimposed codeword signatures\n three types: tuple-level, page-level, bit-sliced\n We give you the overall framework, you supply the details\n Once working, experimental analysis of signature performance\n create several database instances\n run benchmark PMR queries for each signature scheme\n measure costs (sigs read, pages read, tuple comparisons, false matches)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": " applications: create, insert, query, gendata, stats\n ADTs: hash, bits, tsig, psig, bsig, page, tuple, reln, query\n We deal with individual relations, where each relation ...\n is comprised of unique tuples, all the same size, e.g.\n 1000079,QHogGVRvjQRPMXbhKKfg,a3-25,a4-16\n with schema  (id:int/unique, name:char(20), a3:char7, ...)\n and where attributes 3..n all have the same structure\n stored as char strings, but with no trailing '\\0'\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Relations have a number of parameters:\n page size  (fixed, defined by PAGESIZE)\n tuple size  (fixed, determined by #attributes n)  \u21d2  c\n #tuples  =  r  (dynamic, determined by #inserts)\n #pages  =  b  (dynamic, determined by r and c)\n signature size  =  m  (fixed, determined by n and pF)\n bit-slice size  (dynamic**, determined by b)\n ** but not in this assignment (fixed at 4K bits \u21d2 no more than 4k pages)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Formulae for determining signature sizes:\n #bits / attribute  =  k  =  1/loge2 . loge ( 1/pF )\n #bits in tuple sig  =  mt  =  ( 1/loge 2 )2 . n . loge ( 1/pF )\n #bits in page sig  =  mp  =  ( 1/loge 2 )2 . n . c . loge ( 1/pF )\n #bits in bit-slice  =  b ** (except that we fix it to 4K bits)\n Implementation: round sig/slice sizes up to multiple of 8  (bits/byte)\n i.e. if  mt  =  12, allocate 16 bits (2 bytes) for signature\n Above values are computed when relation is created, and stored in params file\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "./gendata #Tuples #Attrs [StartID] [Seed]\n generates  #Tuples, each with  #Attrs  attributes\n default starting ID is 1000000; can change with  StartID\n can change seed for random # generator (default is 0)\n write tuples to standard output as comma-separated fields\n Example:\n $ ./gendata  5  4\n 1000000,lrfkQyuQFjKXyQVNRTyS,a3-00,a4-00\n 1000001,FrzrmzlYGFvEulQfpDBH,a3-01,a4-01\n 1000002,lqDqrrCRwDnXeuOQqekl,a3-02,a4-02\n 1000003,AITGDPHCSPIjtHbsFyfv,a3-03,a4-03\n 1000004,lADzPBfudkKlrwqAOzMi,a3-04,a4-04\n $\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "./create RelName #Attrs 1/pF\n creates a relation called  RelName\n initially with zero tuples; grows via  insert\n all tuples added at the end of the last page\n all pages are full, except the last; no deletions\n ./stats RelName\n displays information about relation  RelName\n ./dump RelName\n displays parameters; can be used to recreate  RelName\n displays tuples from database, one per line\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "./insert RelName\n reads tuples, on per line, from standard input\n insert each tuple into  RelName\n all tuples added at the end of the last page\n if last page is full, add a new page at end\n all pages are full, except the last; no deletions\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "./query RelName PMR-query SigType\n displays all tuples that match  PMR-query\n queries have the form  x1,x1,...xn\n where each xi is either a value or ?\n queries can return 0 or more tuples\n Example queries, assuming  n=3\n ?,?,? ... matches all tuples\n 1000000,?,? ... matches tuples with attr1 = 1000000\n ?,abcde,? ... matches tuples with attr2 = \"abcde\"\n ?,abcde,a3-01 ... matches tuples with attr2 = \"abcde\" and attr2 = \"a3-01\"\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "./query RelName PMR-query SigType\n displays matching tuples, one-per-line\n SigType determines what kind of signatures are used\n SigType = t ... use tuple-level signatures\n SigType = p ... use page-level signatures\n SigType = b ... use bit-sliced signatures\n after displaying result tuples, should also display:\n number of signature/bit-slice pages read\n number of data pages read\n number of tuples checked for matching\n number of data pages read but with no matching tuples\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Relations are implemented as five files:\n Rel.info ... one page with relation parameters\n Rel.data ... pages containing tuples\n Rel.tsig ... pages containing tuple signatures\n Rel.psig ... pages containing page signatures\n Rel.bsig ... pages containing bit slices\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Contents of relation .info file\n Count  npages;   // number of data pages (dynamic)\n Count  ntups;    // total number of tuples (dynamic)\n Count  nattrs;   // number of attributes (fixed)\n Count  tupSize;  // # bytes in tuples (all same size)\n Count  tupPP;    // max tuples per page\n Count  tk;       // bits set per attribute\n Count  tm;       // width of tuple signature (bits)\n Count  tsigSize; // # bytes in tuple signature\n Count  tsigPP;   // max tuple signatures per page\n Count  pm;       // width of page signature (bits)\n Count  psigSize; // # bytes in page signature\n Count  psigPP;   // max tuple signatures per page\n Count  bm;       // width of bit-slice\n Count  bsigSize; // # bytes in bit-slice\n Count  bsigPP;   // max bit-slices per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Page contents (data file):\n There are up to ntups tuples in each page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Page contents (tuple-level signature file):\n There are up to tsigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Page contents (page-level signature file):\n There are up to psigPP signatures per page\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Query-time data structure (minimal):\n struct QueryRep {\n     // static info\n     Reln    rel;       // need to remember Relation info\n     char   *qstring;   // query string\n     //dynamic info\n     Bits    pages;     // list of pages to examine\n     PageID  curpage;   // current page in scan\n     Count   curtup;    // current tuple within page\n     // statistics info\n     ... you can put here whatever you need\n     ... to produce the required statistics\n };\n This is effectively the iteration structure described previously.\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "hash.c\n hash function from PostgreSQL\n produces a 32 bit integer given a string\n util.c\n definition of fatal() error handler\n defs.h\n global definitions (e.g. PAGESIZE, Count)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Abstract Data Types ... interface provided, you implement\n bits.h ... operations on long bit-strings (Bits)\n tsig.h ... operations on tuple signatures\n psig.h ... operations on page signatures\n bsig.h ... operations on bit-slices\n page.h ... operations on pages (Page)\n tuple.h ... operations on tuples (Tuple)\n reln.h ... operations on relations (Reln)\n query.h ... operations for queries (Query)\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of assignment 2 ?",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "List example about assignment 2 ?",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Give me example of assignment 2 ?",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Do you have example about assignment 2 ?",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can i have example of assignment 2 ?",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "example about assignment 2 ?",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I want example of assignment 2",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "Can you give me example about assignment 2 ?",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "I need example of assignment 2",
  "answer": "Style of implementing ADTs\n interface defines type as a pointer to a struct\n implementation defines struct details\n Example:\n In Bits.h\n typedef struct _BitsRep *Bits;\n In Bits.c\n struct _BitsRep {\n     Count  nbits;         // how many bits\n     Count  nbytes;        // how many bytes in array\n     Byte   bitstring[1];  // array of bytes to hold bits\n                           // actual array size is nbytes\n };\n",
  "intent": "example",
  "key_words": [
   "example",
   "assignment",
   "2"
  ]
 },
 {
  "question": "May i have example of transactions the story so far ?",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "List example about transactions the story so far ?",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "Give me example of transactions the story so far ?",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "Do you have example about transactions the story so far ?",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "Can i have example of transactions the story so far ?",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "example about transactions the story so far ?",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "I want example of transactions the story so far",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "Can you give me example about transactions the story so far ?",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "I need example of transactions the story so far",
  "answer": "Transactions should obey ACID properties\n Isolation can be compromised by uncontrolled concurrency\n Serializable schedules avoid potential anomalies\n less safe (more concurrent) isolation levels exist\n read uncommitted, read committed, repeatable read\n Styles of concurrency control\n locking   (two-phase, deadlock)\n optimistic concurrency control   (try, then fix problems)\n multi-version concurrency control   (less locking needed)\n Implementing Atomicity/Durability\n",
  "intent": "example",
  "key_words": [
   "example",
   "transactions",
   "the",
   "story",
   "so",
   "far"
  ]
 },
 {
  "question": "May i have example of atomicity durability ?",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "List example about atomicity durability ?",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "Give me example of atomicity durability ?",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "Do you have example about atomicity durability ?",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "Can i have example of atomicity durability ?",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "example about atomicity durability ?",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "I want example of atomicity durability",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "Can you give me example about atomicity durability ?",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "I need example of atomicity durability",
  "answer": "Reminder:\n Transactions are atomic\n if a tx commits, all of its changes persist in DB\n if a tx aborts, none of its changes occur in DB\n Transaction effects are durable\n if a tx commits, its effects persist (even in the event of subsequent (catastrophic) system failures)\n Implementation of atomicity/durability is intertwined.\n",
  "intent": "example",
  "key_words": [
   "example",
   "atomicity",
   "durability"
  ]
 },
 {
  "question": "May i have example of durability ?",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "List example about durability ?",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Give me example of durability ?",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Do you have example about durability ?",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Can i have example of durability ?",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "example about durability ?",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "I want example of durability",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Can you give me example about durability ?",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "I need example of durability",
  "answer": " single-bit inversion during transfer mem-to-disk\n decay of storage medium on disk (some data changed)\n failure of entire disk device (data no longer accessible)\n failure of DBMS processes (e.g. postgres crashes)\n operating system crash; power failure to computer room\n complete destruction of computer system running DBMS\n The last requires off-site backup; all others should be locally recoverable.\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "May i have example of durability ?",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "List example about durability ?",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Give me example of durability ?",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Do you have example about durability ?",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Can i have example of durability ?",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "example about durability ?",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "I want example of durability",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Can you give me example about durability ?",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "I need example of durability",
  "answer": "Consider following scenario:\n Desired behaviour after system restart:\n all effects of T1, T2 persist\n as if T3, T4 were aborted (no effects remain)\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "May i have example of durability ?",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "List example about durability ?",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Give me example of durability ?",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Do you have example about durability ?",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Can i have example of durability ?",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "example about durability ?",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "I want example of durability",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "Can you give me example about durability ?",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "I need example of durability",
  "answer": "Durabilty begins with a stable disk storage subsystem\n i.e. effects of putPage() and getPage() are consistent\n We can prevent/minimise loss/corruption of data due to:\n mem/disk transfer corruption: parity checking\n sector failure: mark \"bad\" blocks\n disk failure: RAID (levels 4,5,6)\n destruction of computer system: off-site backups\n",
  "intent": "example",
  "key_words": [
   "example",
   "durability"
  ]
 },
 {
  "question": "May i have example of dealing with transaction ?",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "List example about dealing with transaction ?",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "Give me example of dealing with transaction ?",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "Do you have example about dealing with transaction ?",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "Can i have example of dealing with transaction ?",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "example about dealing with transaction ?",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "I want example of dealing with transaction",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "Can you give me example about dealing with transaction ?",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "I need example of dealing with transaction",
  "answer": "The remaining \"failure modes\" that we need to consider:\n failure of DBMS processes or operating system\n failure of transactions (ABORT)\n Standard technique for managing these:\n keep a log of changes made to database\n use this log to restore state in case of failures\n",
  "intent": "example",
  "key_words": [
   "example",
   "dealing",
   "with",
   "transaction"
  ]
 },
 {
  "question": "May i have example of execution of transaction ?",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "List example about execution of transaction ?",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Give me example of execution of transaction ?",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Do you have example about execution of transaction ?",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can i have example of execution of transaction ?",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "example about execution of transaction ?",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I want example of execution of transaction",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can you give me example about execution of transaction ?",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I need example of execution of transaction",
  "answer": "Transactions deal with three address spaces:\n stored data on the disk   (representing DB state)\n data in memory buffers   (where held for sharing)\n data in their own local variables   (where manipulated)\n Each of these may hold a different \"version\" of a DB object.\n PostgreSQL processes make heavy use of shared buffer pool\n \u21d2 transactions do not deal with much local data.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "May i have example of execution of transaction ?",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "List example about execution of transaction ?",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Give me example of execution of transaction ?",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Do you have example about execution of transaction ?",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can i have example of execution of transaction ?",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "example about execution of transaction ?",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I want example of execution of transaction",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can you give me example about execution of transaction ?",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I need example of execution of transaction",
  "answer": "Operations available for data transfer:\n INPUT(X) ... read page containing X into a buffer\n READ(X,v) ... copy value of X from buffer to local var v\n WRITE(X,v) ... copy value of local var v to X in buffer\n OUTPUT(X) ... write buffer containing X to disk\n READ/WRITE are issued by transaction.\n INPUT/OUTPUT are issued by buffer manager (and log manager).\n INPUT/OUTPUT correspond to getPage()/putPage() mentioned above\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "May i have example of execution of transaction ?",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "List example about execution of transaction ?",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Give me example of execution of transaction ?",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Do you have example about execution of transaction ?",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can i have example of execution of transaction ?",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "example about execution of transaction ?",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I want example of execution of transaction",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can you give me example about execution of transaction ?",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I need example of execution of transaction",
  "answer": "Example of transaction execution:\n -- implements A = A*2; B = B+1;\n BEGIN\n READ(A,v); v = v*2; WRITE(A,v);\n READ(B,v); v = v+1; WRITE(B,v);\n COMMIT\n READ accesses the buffer manager and may cause INPUT.\n COMMIT needs to ensure that buffer contents go to disk.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "May i have example of execution of transaction ?",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "List example about execution of transaction ?",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Give me example of execution of transaction ?",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Do you have example about execution of transaction ?",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can i have example of execution of transaction ?",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "example about execution of transaction ?",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I want example of execution of transaction",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "Can you give me example about execution of transaction ?",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "I need example of execution of transaction",
  "answer": "States as the transaction executes:\n t   Action        v  Buf(A)  Buf(B)  Disk(A)  Disk(B)\n -----------------------------------------------------\n (0) BEGIN         .      .       .        8        5\n (1) READ(A,v)     8      8       .        8        5\n (2) v = v*2      16      8       .        8        5\n (3) WRITE(A,v)   16     16       .        8        5\n (4) READ(B,v)     5     16       5        8        5\n (5) v = v+1       6     16       5        8        5\n (6) WRITE(B,v)    6     16       6        8        5\n (7) OUTPUT(A)     6     16       6       16        5\n (8) OUTPUT(B)     6     16       6       16        6\n After tx completes, we must have either Disk(A)=8, Disk(B)=5   or   Disk(A)=16, Disk(B)=6\n If system crashes before (8), may need to undo disk changes.\n If system crashes after (8), may need to redo disk changes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "execution",
   "of",
   "transaction"
  ]
 },
 {
  "question": "May i have example of transaction and buffer pool ?",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "List example about transaction and buffer pool ?",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Give me example of transaction and buffer pool ?",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Do you have example about transaction and buffer pool ?",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Can i have example of transaction and buffer pool ?",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "example about transaction and buffer pool ?",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "I want example of transaction and buffer pool",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Can you give me example about transaction and buffer pool ?",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "I need example of transaction and buffer pool",
  "answer": "Two issues arise w.r.t. buffers:\n forcing ... OUTPUT buffer on each WRITE\n ensures durability; disk always consistent with buffer pool\n poor performance; defeats purpose of having buffer pool\n stealing ... replace buffers of uncommitted tx's\n if we don't, poor throughput (tx's blocked on buffers)\n if we do, seems to cause atomicity problems?\n Ideally, we want stealing and not forcing.\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "May i have example of transaction and buffer pool ?",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "List example about transaction and buffer pool ?",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Give me example of transaction and buffer pool ?",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Do you have example about transaction and buffer pool ?",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Can i have example of transaction and buffer pool ?",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "example about transaction and buffer pool ?",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "I want example of transaction and buffer pool",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Can you give me example about transaction and buffer pool ?",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "I need example of transaction and buffer pool",
  "answer": "Handling stealing:\n transaction T loads page P and makes changes\n T2 needs a buffer, and P is the \"victim\"\n P is output to disk (it's dirty) and replaced\n if T aborts, some of its changes are already \"committed\"\n must log values changed in P at \"steal-time\"\n use these to UNDO changes in case of failure of T\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "May i have example of transaction and buffer pool ?",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "List example about transaction and buffer pool ?",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Give me example of transaction and buffer pool ?",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Do you have example about transaction and buffer pool ?",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Can i have example of transaction and buffer pool ?",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "example about transaction and buffer pool ?",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "I want example of transaction and buffer pool",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "Can you give me example about transaction and buffer pool ?",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "I need example of transaction and buffer pool",
  "answer": "Handling no forcing:\n transaction T makes changes & commits, then system crashes\n but what if modified page P has not yet been output?\n must log changed values in P as soon as they change\n use these to support REDO to restore changes\n Above scenario may be a problem, even if we are forcing\n e.g. system crashes immediately after requesting a WRITE()\n",
  "intent": "example",
  "key_words": [
   "example",
   "transaction",
   "and",
   "buffer",
   "pool"
  ]
 },
 {
  "question": "May i have example of logging ?",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "List example about logging ?",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "Give me example of logging ?",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "Do you have example about logging ?",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "Can i have example of logging ?",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "example about logging ?",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "I want example of logging",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about logging ?",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "I need example of logging",
  "answer": "Three \"styles\" of logging\n undo ... removes changes by any uncommitted tx's\n redo ... repeats changes by any committed tx's\n undo/redo ... combines aspects of both\n All approaches require:\n a sequential file of log records\n each log record describes a change to a data item\n log records are written first\n actual changes to data are written later\n Known as write-ahead logging    (PostgreSQL uses WAL)\n",
  "intent": "example",
  "key_words": [
   "example",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo logging ?",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "List example about undo logging ?",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo logging ?",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo logging ?",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo logging ?",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "example about undo logging ?",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo logging",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo logging ?",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo logging",
  "answer": "Simple form of logging which ensures atomicity.\n Log file consists of a sequence of small records:\n <START T> ... transaction T begins\n <COMMIT T> ... transaction T completes successfully\n <ABORT T> ... transaction T fails (no changes)\n <T,X,v> ... transaction T changed value of X from v\n Notes:\n we refer to <T,X,v> generically as <UPDATE> log records\n update log entry created for each WRITE (not OUTPUT)\n update log entry contains old value (new value is not recorded)\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo logging ?",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "List example about undo logging ?",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo logging ?",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo logging ?",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo logging ?",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "example about undo logging ?",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo logging",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo logging ?",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo logging",
  "answer": "Data must be written to disk in the following order:\n 1. <START> transaction log record\n 2. <UPDATE> log records indicating changes\n 3. the changed data elements themselves\n 4. <COMMIT> log record\n Note: sufficient to have <T,X,v> output before X, for each X\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "List example about undo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "example about undo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo logging",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo logging",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n (11) EndCommit                                <COMMIT T>\n (12) FlushLog\n Note that T is not regarded as committed until (12) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo logging ?",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "List example about undo logging ?",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo logging ?",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo logging ?",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo logging ?",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "example about undo logging ?",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo logging",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo logging ?",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo logging",
  "answer": "Simplified view of recovery using UNDO logging:\n scan backwards through log\n if <COMMIT T>, mark T as committed\n if <T,X,v> and T not committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo logging ?",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "List example about undo logging ?",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo logging ?",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo logging ?",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo logging ?",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "example about undo logging ?",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo logging",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo logging ?",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo logging",
  "answer": "Algorithmic view of recovery using UNDO logging:\n committedTrans = abortedTrans = startedTrans = {}\n for each log record from most recent to oldest {\n     switch (log record) {\n     <COMMIT T> : add T to committedTrans\n     <ABORT T>  : add T to abortedTrans\n     <START T>  : add T to startedTrans\n     <T,X,v>    : if (T in committedTrans)\n                      // don't undo committed changes\n                  else  // roll-back changes\n                      { WRITE(X,v); OUTPUT(X) }\n }   }\n for each T in startedTrans {\n     if (T in committedTrans) ignore\n     else if (T in abortedTrans) ignore\n     else write <ABORT T> to log\n }\n flush log\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "logging"
  ]
 },
 {
  "question": "May i have example of checkpointing ?",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "List example about checkpointing ?",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Give me example of checkpointing ?",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Do you have example about checkpointing ?",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Can i have example of checkpointing ?",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "example about checkpointing ?",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "I want example of checkpointing",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Can you give me example about checkpointing ?",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "I need example of checkpointing",
  "answer": "Simple view of recovery implies reading entire log file.\n Since log file grows without bound, this is infeasible.\n Eventually we can delete \"old\" section of log.\n i.e. where all prior transactions have committed\n This point is called a checkpoint.\n all of log prior to checkpoint can be ignored for recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "May i have example of checkpointing ?",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "List example about checkpointing ?",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Give me example of checkpointing ?",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Do you have example about checkpointing ?",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Can i have example of checkpointing ?",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "example about checkpointing ?",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "I want example of checkpointing",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Can you give me example about checkpointing ?",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "I need example of checkpointing",
  "answer": "Problem: many concurrent/overlapping transactions.\n How to know that all have finished?\n 1. periodically, write log record <CHKPT (T1,..,Tk)> (contains references to all active transactions \u21d2 active tx table)\n 2. continue normal processing (e.g. new tx's can start)\n 3. when all of T1,..,Tk have completed, write log record <ENDCHKPT> and flush log\n Note: tx manager maintains chkpt and active tx information\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "May i have example of checkpointing ?",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "List example about checkpointing ?",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Give me example of checkpointing ?",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Do you have example about checkpointing ?",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Can i have example of checkpointing ?",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "example about checkpointing ?",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "I want example of checkpointing",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "Can you give me example about checkpointing ?",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "I need example of checkpointing",
  "answer": "Recovery: scan backwards through log file processing as before.\n Determining where to stop depends on ...\n whether we meet <ENDCHKPT> or <CHKPT...> first\n If we encounter <ENDCHKPT> first:\n we know that all incomplete tx's come after prev <CHKPT...>\n thus, can stop backward scan when we reach <CHKPT...>\n If we encounter <CHKPT (T1,..,Tk)> first:\n crash occurred during the checkpoint period\n any of T1,..,Tk that committed before crash are ok\n for uncommitted tx's, need to continue backward scan\n",
  "intent": "example",
  "key_words": [
   "example",
   "checkpointing"
  ]
 },
 {
  "question": "May i have example of redo logging ?",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about redo logging ?",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of redo logging ?",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about redo logging ?",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of redo logging ?",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about redo logging ?",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of redo logging",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about redo logging ?",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of redo logging",
  "answer": "Problem with UNDO logging:\n all changed data must be output to disk before committing\n conflicts with optimal use of the buffer pool\n Alternative approach is redo logging:\n allow changes to remain only in buffers after commit\n write records to indicate what changes are \"pending\"\n after a crash, can apply changes during recovery\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of redo logging ?",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about redo logging ?",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of redo logging ?",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about redo logging ?",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of redo logging ?",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about redo logging ?",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of redo logging",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about redo logging ?",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of redo logging",
  "answer": "Requirement for redo logging: write-ahead rule.\n Data must be written to disk as follows:\n 1. start transaction log record\n 2. update log records indicating changes\n 3. then commit log record (OUTPUT)\n 4. then OUTPUT changed data elements themselves\n Note that update log records now contain <T,X,v'>, where v' is the new value for X.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of redo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about redo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of redo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about redo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of redo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about redo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of redo logging",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about redo logging ?",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of redo logging",
  "answer": "For the example transaction, we would get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,6>\n (7)  COMMIT                                   <COMMIT T>\n (8)  FlushLog\n (9)  OUTPUT(A)     6   16     6    16     5\n (10) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (8) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of redo logging ?",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about redo logging ?",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of redo logging ?",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about redo logging ?",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of redo logging ?",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about redo logging ?",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of redo logging",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about redo logging ?",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of redo logging",
  "answer": "Simplified view of recovery using REDO logging:\n identify all committed tx's   (backwards scan)\n scan forwards through log\n if <T,X,v> and T is committed, set X to v on disk\n if <START T> and T not committed, put <ABORT T> in log\n Assumes we scan entire log; use checkpoints to limit scan.\n",
  "intent": "example",
  "key_words": [
   "example",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo redo logging ?",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about undo redo logging ?",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo redo logging ?",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo redo logging ?",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo redo logging ?",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about undo redo logging ?",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo redo logging",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo redo logging ?",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo redo logging",
  "answer": "UNDO logging and REDO logging are incompatible in\n order of outputting <COMMIT T> and changed data\n how data in buffers is handled during checkpoints\n Undo/Redo logging combines aspects of both\n requires new kind of update log record <T,X,v,v'> gives both old and new values for X\n removes incompatibilities between output orders\n As for previous cases, requires write-ahead of log records.\n Undo/redo loging is common in practice; Aries algorithm.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo redo logging ?",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about undo redo logging ?",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo redo logging ?",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo redo logging ?",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo redo logging ?",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about undo redo logging ?",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo redo logging",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo redo logging ?",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo redo logging",
  "answer": "For the example transaction, we might get:\n t    Action        v  B(A)  B(B)  D(A)  D(B)  Log\n --------------------------------------------------------\n (0)  BEGIN         .    .     .     8     5   <START T>\n (1)  READ(A,v)     8    8     .     8     5\n (2)  v = v*2      16    8     .     8     5\n (3)  WRITE(A,v)   16   16     .     8     5   <T,A,8,16>\n (4)  READ(B,v)     5   16     5     8     5\n (5)  v = v+1       6   16     5     8     5\n (6)  WRITE(B,v)    6   16     6     8     5   <T,B,5,6>\n (7)  FlushLog\n (8)  StartCommit\n (9)  OUTPUT(A)     6   16     6    16     5\n (10)                                          <COMMIT T>\n (11) OUTPUT(B)     6   16     6    16     6\n Note that T is regarded as committed as soon as (10) completes.\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo redo logging ?",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about undo redo logging ?",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo redo logging ?",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo redo logging ?",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo redo logging ?",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about undo redo logging ?",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo redo logging",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo redo logging ?",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo redo logging",
  "answer": "Simplified view of recovery using UNDO/REDO logging:\n scan log to determine committed/uncommitted txs\n for each uncommitted tx T add <ABORT T> to log\n scan backwards through log\n if <T,X,v,w> and T is not committed, set X to v on disk\n scan forwards through log\n if <T,X,v,w> and T is committed, set X to w on disk\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of undo redo logging ?",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "List example about undo redo logging ?",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Give me example of undo redo logging ?",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Do you have example about undo redo logging ?",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can i have example of undo redo logging ?",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "example about undo redo logging ?",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I want example of undo redo logging",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "Can you give me example about undo redo logging ?",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "I need example of undo redo logging",
  "answer": "The above description simplifies details of undo/redo logging.\n Aries is a complete algorithm for undo/redo logging.\n Differences to what we have described:\n log records contain a sequence numnber (LSN) LSNs used in tx and buffer managers, and stored in data pages\n additional log record to mark <END> (of commit or abort)\n <CHKPT> contains only a timestamp\n <ENDCHKPT..> contains tx and dirty page info\n",
  "intent": "example",
  "key_words": [
   "example",
   "undo",
   "redo",
   "logging"
  ]
 },
 {
  "question": "May i have example of recovery in postgresql ?",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List example about recovery in postgresql ?",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me example of recovery in postgresql ?",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have example about recovery in postgresql ?",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have example of recovery in postgresql ?",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "example about recovery in postgresql ?",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want example of recovery in postgresql",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me example about recovery in postgresql ?",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need example of recovery in postgresql",
  "answer": "PostgreSQL uses write-ahead undo/redo style logging.\n It also uses multi-version concurrency control, which\n tags each record with a tx and update timestamp\n MVCC simplifies some aspects of undo/redo, e.g.\n some info required by logging is already held in each tuple\n no need to undo effects of aborted tx's; use old version\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have example of recovery in postgresql ?",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List example about recovery in postgresql ?",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me example of recovery in postgresql ?",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have example about recovery in postgresql ?",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have example of recovery in postgresql ?",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "example about recovery in postgresql ?",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want example of recovery in postgresql",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me example about recovery in postgresql ?",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need example of recovery in postgresql",
  "answer": "Transaction/logging code is distributed throughout backend.\n Core transaction code is in src/backend/access/transam.\n Transaction/logging data is written to files in PGDATA/pg_xlog\n a number of very large files containing log records\n old files are removed once all txs noted there are completed\n new files added when existing files reach their capacity (16MB)\n number of tx log files varies depending on tx activity\n Produced: 20 Sep 2018\n",
  "intent": "example",
  "key_words": [
   "example",
   "recovery",
   "in",
   "postgresql"
  ]
 }
]