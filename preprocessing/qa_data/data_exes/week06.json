[
 {
  "question": "May i have exercise about week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "List exercise of week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "Give me exercise about week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "Do you have exercise of week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "Can i have exercise about week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "I need exercise of week 6 lecture",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "exercise about week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "I want exercise of week 6 lecture",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "Can you give me exercise about week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "Can you give me some exercise of week 6 lecture ?",
  "answer": "Implementing in PostgreSQL\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "week",
   "6",
   "lecture"
  ]
 },
 {
  "question": "May i have exercise about recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "List exercise of recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "Give me exercise about recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "Do you have exercise of recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "Can i have exercise about recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "I need exercise of recap on implementing selection",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "exercise about recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "I want exercise of recap on implementing selection",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "Can you give me exercise about recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "Can you give me some exercise of recap on implementing selection ?",
  "answer": "Selection =  select * from  R  where  C\n yields a subset of R tuples satisfying condition C\n a very important (frequent) operation in relational databases\n Types of selection determined by type of condition\n one:  select * from  R  where id=k\n pmr:  select * from  R  where age=65\n rng:   select * from  R  where age\u226518 and age\u226421\n Strategies for implementing selection efficiently\n arrangement of tuples in file  (e.g. sorting, hashing)\n auxiliary data structures  (e.g. indexes, signatures)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "recap",
   "on",
   "implementing",
   "selection"
  ]
 },
 {
  "question": "May i have exercise about linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "List exercise of linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Give me exercise about linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Do you have exercise of linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can i have exercise about linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I need exercise of linear hashing",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "exercise about linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I want exercise of linear hashing",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me exercise about linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of linear hashing ?",
  "answer": "File organisation:\n file of primary data blocks\n file of overflow data blocks\n a register called the split pointer\n Uses systematic method of growing data file ...\n hash function \"adapts\" to changing address range\n systematic splitting controls length of overflow chains\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "May i have exercise about insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "List exercise of insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Give me exercise about insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Do you have exercise of insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can i have exercise about insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I need exercise of insertion with linear hashing",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "exercise about insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I want exercise of insertion with linear hashing",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me exercise about insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion with linear hashing ?",
  "answer": "Abstract view:\n P = bits(d,hash(key));\n if (P < sp) P = bits(d+1,hash(key));\n // bucket P = page P + its overflow pages\n for each page Q in bucket P {\n     if (space in Q) { insert into Q; break; }\n }\n if (no insertion) {\n     add new ovflow page to bucket P\n     insert into new page\n }\n if (need to split) {\n     partition tuples from bucket sp\n           into buckets sp and sp+2^d\n     sp++;\n     if (sp == 2^d) { d++; sp = 0; }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "May i have exercise about insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "List exercise of insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Give me exercise about insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Do you have exercise of insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can i have exercise about insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I need exercise of insertion with linear hashing",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "exercise about insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I want exercise of insertion with linear hashing",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me exercise about insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion with linear hashing ?",
  "answer": "Splitting block sp=01:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "May i have exercise about insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "List exercise of insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Give me exercise about insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Do you have exercise of insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can i have exercise about insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I need exercise of insertion with linear hashing",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "exercise about insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I want exercise of insertion with linear hashing",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me exercise about insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion with linear hashing ?",
  "answer": "Splitting algorithm:\n // partitions tuples between two buckets\n newp = sp + 2^d; oldp = sp;\n buf = getPage(f,sp);\n clear(oldBuf); clear(newBuf);\n // start filling data page buffers\n for (i = 0; i < nTuples(buf); i++) {\n     tup = getTuple(buf,i);\n     p = bits(d+1,hash(tup.k));\n     if (p == newp)         addTuple(newBuf,tup);\n     else\n         addTuple(oldBuf,tup);\n }\n ... remove and re-insert tuples from ovflow chain ...\n sp++;\n if (sp == 2^d) { d++; sp = 0; }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "May i have exercise about insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "List exercise of insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "I need exercise of insertion cost",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "exercise about insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "I want exercise of insertion cost",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion cost ?",
  "answer": "If no split required, cost same as for standard hashing:\n Costinsert  =    Best: 1r + 1w,     Worst: (1+max(Ov))r + 2w\n If split occurs, incur Costinsert  plus cost of splitting:\n read block sp   (plus all of its overflow blocks)\n write block sp   (and its new overflow blocks)\n write block sp+2d   (and its new overflow blocks)\n On average,   Costsplit  =  (1+Ov)r + (2+Ov)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "List exercise of deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Give me exercise about deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Do you have exercise of deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can i have exercise about deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I need exercise of deletion with linear hashing",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "exercise about deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "I want exercise of deletion with linear hashing",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me exercise about deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of deletion with linear hashing ?",
  "answer": "Deletion is similar to ordinary static hash file.\n But might wish to contract file when enough tuples removed.\n Rationale: r shrinks, b stays large \u21d2 wasted space.\n Method: remove last bucket in data file (contracts linearly).\n Involves a coalesce procedure which is an inverse split.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "linear",
   "hashing"
  ]
 },
 {
  "question": "May i have exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of hash file in postgresql",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of hash file in postgresql",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of hash file in postgresql ?",
  "answer": "PostgreSQL uses linear hashing on tables which have been:\n create index Ix on R using hash (k);\n Hash file implementation: backend/access/hash\n hashfunc.c ... a family of hash functions\n hashinsert.c ... insert, with overflows\n hashpage.c ... utilities + splitting\n hashsearch.c ... iterator for hash files\n Based on \"A New Hashing Package for Unix\", Margo Seltzer, Winter Usenix 1991\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of hash file in postgresql",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of hash file in postgresql",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of hash file in postgresql ?",
  "answer": "PostgreSQL uses a different file organisation ...\n has a single file containing main and overflow pages\n has groups of size 2n of data pages\n in between groups, arbitrary number of overflow pages\n maintains collection of group pointers in header page\n each group pointer indicates start of data page group\n Also maintain a split pointer for data pages.\n If overflow pages become empty, add to free list and re-use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of hash file in postgresql",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of hash file in postgresql",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of hash file in postgresql ?",
  "answer": "PostgreSQL hash file structure:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of hash file in postgresql",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of hash file in postgresql",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of hash file in postgresql ?",
  "answer": "Converting bucket # to page address (adapted from pgsql source):\n typedef unsigned int Word;\n // which page is primary page of bucket B\n Word bucket_to_page(Word splits[], B) {\n    Word chunk, base, offset;\n    chunk = (B<2) ? 0 : lg2(B+1)-1;\n    base = splits[chunk];\n    offset = (B<2) ? B : B-(1<<chunk);\n    return (base + offset);\n }\n // returns ceil(log_2(n))\n int lg2(Word n) {\n    int i, v;\n    for (i = 0, v = 1; v < n; v <= 1) i++;\n    return i;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hash",
   "file",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "List exercise of indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "Give me exercise about indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "Do you have exercise of indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "Can i have exercise about indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "I need exercise of indexing",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "exercise about indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "I want exercise of indexing",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "Can you give me exercise about indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "Can you give me some exercise of indexing ?",
  "answer": "An index is a table/file of (keyVal,tupleID) pairs, e.g.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "indexing"
  ]
 },
 {
  "question": "May i have exercise about index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "List exercise of index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Give me exercise about index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "I need exercise of index",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "exercise about index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "I want exercise of index",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of index ?",
  "answer": "A 1-d index is based on the value of a single attribute A.\n Some possible properties of A:\n may be used to sort data file   (or may be sorted on some other field)\n values may be unique   (or there may be multiple instances)\n Taxonomy of index types, based on properties of index attribute:\n primary index on unique field, may be sorted on A\n clustering index on non-unique field, file sorted on A\n secondary file not sorted on A\n A given table may have indexes on several attributes.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "May i have exercise about index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "List exercise of index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Give me exercise about index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "I need exercise of index",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "exercise about index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "I want exercise of index",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of index ?",
  "answer": "Indexes themselves may be structured in several ways:\n dense every tuple is referenced by an entry in the index file\n sparse only some tuples are referenced by index file entries\n single-level tuples are accessed directly from the index file\n multi-level may need to access several index pages to reach tuple\n Index file has total i pages   (where typically i \u226a b)\n Index file has page capacity ci   (where typically ci \u226b c)\n Dense index:  i = ceil( r/ci )     Sparse index:  i = ceil( b/ci )\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "index"
  ]
 },
 {
  "question": "May i have exercise about dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "List exercise of dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "I need exercise of dense primary index",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "exercise about dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "I want exercise of dense primary index",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of dense primary index ?",
  "answer": "Data file unsorted; one index entry for each tuple\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "dense",
   "primary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "List exercise of sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "I need exercise of sparse primary index",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "exercise about sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "I want exercise of sparse primary index",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of sparse primary index ?",
  "answer": "Data file sorted; one index entry for each page\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "sparse",
   "primary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "List exercise of selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I need exercise of selection with primary index",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "exercise about selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I want exercise of selection with primary index",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of selection with primary index ?",
  "answer": "For one queries:\n ix = binary search index for entry with key K\n if nothing found { return NotFound }\n b = getPage(pageOf(ix.tid))\n t = getTuple(b,offsetOf(ix.tid))\n    -- may require reading overflow pages\n return t\n Worst case:   read log2i index pages  +  read 1+Ov data pages.\n Thus, Costone,prim  =  log2 i + 1 + Ov\n Assume: index pages are same size as data pages \u21d2 same reading cost\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "List exercise of selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I need exercise of selection with primary index",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "exercise about selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I want exercise of selection with primary index",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of selection with primary index ?",
  "answer": "For range queries on primary key:\n use index search to find lower bound\n read index sequentially until reach upper bound\n accumulate set of buckets to be examined\n examine each bucket in turn to check for matches\n For pmr queries involving primary key:\n search as if performing one query.\n For queries not involving primary key, index gives no help.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "List exercise of insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I need exercise of insertion with primary index",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "exercise about insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I want exercise of insertion with primary index",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion with primary index ?",
  "answer": "Overview:\n insert tuple into page P\n find location for new entry in index file\n    // could check whether it already exists\n insert new index entry (k,tid) into index file    // tid = tupleID = (P + offset within page)\n Problem: order of index entries must be maintained\n need to avoid overflow pages in index\n so we need to reorganise index file\n On average, this requires us to read/write half of index file.\n Costinsert,prim  =  (log2i)r + i/2.(1r+1w) + (1+Ov)r + (1+\u03b4)w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "List exercise of deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I need exercise of deletion with primary index",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "exercise about deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "I want exercise of deletion with primary index",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of deletion with primary index ?",
  "answer": "Overview:\n find tuple using index\n mark tuple as deleted\n delete index entry for tuple\n If we delete index entries by marking ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + 2w\n If we delete index entry by index file reorganisation ...\n Costdelete,prim  =  (log2 i + 1 + Ov)r + i/2.(1r+1w) + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "deletion",
   "with",
   "primary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "List exercise of clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Give me exercise about clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "I need exercise of clustering index",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "exercise about clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "I want exercise of clustering index",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of clustering index ?",
  "answer": "Data file sorted; one index entry for each key value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "May i have exercise about clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "List exercise of clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Give me exercise about clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "I need exercise of clustering index",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "exercise about clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "I want exercise of clustering index",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of clustering index ?",
  "answer": "Index on non-unique ordering attribute Ac.\n Usually a sparse index; one pointer to first tuple containing value.\n Assists with:\n range queries on Ac   (find lower bound, then scan data)\n pmr queries involving Ac   (search index for specified value)\n Insertions are expensive: rearrange index file and data file.\n Deletions relatively cheap (similar to primary index).\n (Note: can't mark index entry for value X until all X tuples are deleted)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "clustering",
   "index"
  ]
 },
 {
  "question": "May i have exercise about secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "List exercise of secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "I need exercise of secondary index",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "exercise about secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "I want exercise of secondary index",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of secondary index ?",
  "answer": "Generally, dense index on non-unique attribute As\n data file is not ordered on attribute As\n index file is ordered on attribute As\n Problem: multiple tuples with same value for As.\n A solution:\n dense index (Ix2) containing just TupleId's\n sparse index (Ix1) on dense index containing (key,offset) pairs\n Each offset references an entry in Ix2\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "List exercise of secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "I need exercise of secondary index",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "exercise about secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "I want exercise of secondary index",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of secondary index ?",
  "answer": "Costpmr  =  Costrange  =  (log2i + aq2 + bq.(1 + Ov)) Costrange  =  (log2i + aq1 + aq2 + bq.(1 + Ov))\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "secondary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "List exercise of insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Give me exercise about insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "I need exercise of insertion deletion with secondary index",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "exercise about insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "I want exercise of insertion deletion with secondary index",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion deletion with secondary index ?",
  "answer": "Insertion:\n each insert requires three files to be updated\n potentially costly rearrangement of index files\n Deletion:\n use mark-style (tombstone) deletion for data tuples\n Ix2 entries: can always mark as \"deleted\"\n Ix1 entries: mark only after removing last instance for k in Ix2\n periodic \"vacuum\" to reduce storage overhead if many deletions\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "deletion",
   "with",
   "secondary",
   "index"
  ]
 },
 {
  "question": "May i have exercise about multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "List exercise of multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Give me exercise about multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "I need exercise of multi-level index",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "exercise about multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "I want exercise of multi-level index",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-level index ?",
  "answer": "Above Secondary Index used two index files to speed up search\n by keeping the initial index search relatively quick\n Ix1 small (depends on number of unique key values)\n Ix2 larger (depends on amount of repetition of keys)\n typically, bIx1 \u226a bIx2\n Could improve further by\n making Ix1 sparse, since Ix2 is guaranteed to be ordered\n in this case, bIx1 = ceil( bIx2 / ci )\n if Ix1 becomes too large, add Ix3 and make Ix2 sparse\n if data file ordered on key, could make Ix3 sparse\n Ultimately, reduce top-level of index hierarchy to one page.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "May i have exercise about multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "List exercise of multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Give me exercise about multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "I need exercise of multi-level index",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "exercise about multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "I want exercise of multi-level index",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-level index ?",
  "answer": "Example data file with three-levels of index:\n Assume:  not primary key,  c = 100,  ci = 3\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "May i have exercise about select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "List exercise of select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Give me exercise about select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "I need exercise of select with multi-level index",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "exercise about select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "I want exercise of select with multi-level index",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of select with multi-level index ?",
  "answer": "For one query on indexed key field:\n I = top level index page\n for level = 1 to d {\n     read index page I\n     search index page for J'th entry\n         where index[J].key <= K < index[J+1].key\n     if J=0 { return NotFound }\n     I = index[J].page\n }\n -- I is now address of data page\n search page I and its overflow pages\n Read d index blocks and 1+Ov data blocks.\n Thus, Costone,mli  =  (d + 1 + Ov)r\n (Note that d = ceil( logci r ) and ci is large because index entries are small)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "select",
   "with",
   "multi-level",
   "index"
  ]
 },
 {
  "question": "May i have exercise about b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "List exercise of b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Give me exercise about b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Do you have exercise of b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Can i have exercise about b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "I need exercise of b-trees",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "exercise about b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "I want exercise of b-trees",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me exercise about b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of b-trees ?",
  "answer": "B-trees are MSTs with the properties:\n they are updated so as to remain balanced\n each node has at least (n-1)/2 entries in it\n each tree node occupies an entire disk page\n B-tree insertion and deletion methods\n are moderately complicated to describe\n can be implemented very efficiently\n Advantages of B-trees over general MSTs\n better storage utilisation (around 2/3 full)\n better worst case performance (shallower)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "May i have exercise about b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "List exercise of b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Give me exercise about b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Do you have exercise of b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Can i have exercise about b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "I need exercise of b-trees",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "exercise about b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "I want exercise of b-trees",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me exercise about b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of b-trees ?",
  "answer": "Example B-tree (depth=3, n=3):\n (Note that nodes are pages, with potential for large branching factor, e.g. n=500)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees"
  ]
 },
 {
  "question": "May i have exercise about b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "List exercise of b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "Give me exercise about b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "Do you have exercise of b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "Can i have exercise about b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "I need exercise of b-tree depth",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "exercise about b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "I want exercise of b-tree depth",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "Can you give me exercise about b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "Can you give me some exercise of b-tree depth ?",
  "answer": "Depth depends on effective branching factor  (i.e. how full nodes are).\n Simulation studies show typical B-tree nodes are 69% full.\n Gives   load Li = 0.69 \u00d7 ci   and   depth of tree ~ ceil( logLi r ).\n Example: ci=128,    Li=88\n Level #nodes #keys\n root 1 87\n 1 88 7656\n 2 7744 673728\n 3 681472 59288064\n Note: ci is generally larger than 128 for a real B-tree.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "depth"
  ]
 },
 {
  "question": "May i have exercise about insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "List exercise of insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "Give me exercise about insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "Do you have exercise of insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "Can i have exercise about insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "I need exercise of insertion into b-trees",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "exercise about insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "I want exercise of insertion into b-trees",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me exercise about insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion into b-trees ?",
  "answer": "Overview of the method:\n 1. find leaf node and position in node where entry would be stored\n 2. if node is not full, insert entry into appropriate spot\n 3. if node is full, split node into two half-full nodes\n                        and promote middle element to parent\n 4. if parent full, split and promote\n Note: if duplicates not allowed and key is found, may stop after step 1.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "b-trees"
  ]
 },
 {
  "question": "May i have exercise about example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "List exercise of example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "Give me exercise about example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "Do you have exercise of example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "Can i have exercise about example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "I need exercise of example b-tree insertion",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "exercise about example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "I want exercise of example b-tree insertion",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "Can you give me exercise about example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "Can you give me some exercise of example b-tree insertion ?",
  "answer": "https://www.youtube.com/watch?v=KdbFmwRvkvg\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion"
  ]
 },
 {
  "question": "May i have exercise about b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "List exercise of b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "I need exercise of b-tree insertion cost",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "exercise about b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "I want exercise of b-tree insertion cost",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of b-tree insertion cost ?",
  "answer": "Insertion cost = CosttreeSearch + CosttreeInsert + CostdataInsert\n Best case: write one page (most of time)\n traverse from root to leaf\n read/write data page, write updated leaf\n Costinsert  =  Dr + 1w + 1r + 1w\n Common case: 3 node writes (rearrange 2 leaves + parent)\n traverse from root to leaf, holding nodes in buffer\n read/write data page\n update/write leaf, parent and sibling\n Costinsert  =  Dr + 3w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "List exercise of b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "I need exercise of b-tree insertion cost",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "exercise about b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "I want exercise of b-tree insertion cost",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of b-tree insertion cost ?",
  "answer": "Worst case: 2D-1 node writes (propagate to root)\n traverse from root to leaf, holding nodes in buffers\n read/write data page\n update/write leaf, parent and sibling\n repeat previous step D-1 times\n Costinsert  =  Dr + (2D-1)w + 1r + 1w\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-tree",
   "insertion",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "List exercise of selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "Give me exercise about selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "Do you have exercise of selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "Can i have exercise about selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "I need exercise of selection with b-trees",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "exercise about selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "I want exercise of selection with b-trees",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me exercise about selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of selection with b-trees ?",
  "answer": "For one queries:\n N = B-tree root node\n while (N is not a leaf node)\n    N = scanToFindChild(N,K)\n TupleID = scanToFindEntry(N,K)\n access tuple t using TupleID from N\n Costone  =  (D + 1)r\n For range queries (assume sorted on index attribute):\n search index to find leaf node for Lo\n for each leaf node entry until Hi found {\n  access tuple t using TupleId from entry\n }\n Costrange  =  (D + bi + bq)r\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "selection",
   "with",
   "b-trees"
  ]
 },
 {
  "question": "May i have exercise about b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of b-trees in postgresql",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of b-trees in postgresql",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of b-trees in postgresql ?",
  "answer": "PostgreSQL implements Lehman/Yao-style B-trees.\n A variant that works effectively in high-concurrency environments.\n B-tree implementation: backend/access/nbtree\n nbtree.c ... interface functions (for iterators)\n nbtsearch.c ... traverse index to find key value\n nbtinsert.c ... add new entry to B-tree index\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of b-trees in postgresql",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of b-trees in postgresql",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of b-trees in postgresql ?",
  "answer": "Interface functions for B-trees\n // build Btree index on relation\n Datum btbuild(rel,index,...)\n // insert index entry into Btree\n Datum btinsert(rel,key,tupleid,index,...)\n // start scan on Btree index\n Datum btbeginscan(rel,key,scandesc,...)\n // get next tuple in a scan\n Datum btgettuple(scandesc,scandir,...)\n // close down a scan\n Datum btendscan(scandesc)\n N-dimensional Selection\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "b-trees",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "List exercise of n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "Give me exercise about n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "Do you have exercise of n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "Can i have exercise about n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "I need exercise of n-dimensional query",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "exercise about n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "I want exercise of n-dimensional query",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "Can you give me exercise about n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "Can you give me some exercise of n-dimensional query ?",
  "answer": "Have looked at one-dimensional queries, e.g.\n select * from R where a = K\n select * from R where a between Lo and Hi\n and heaps, hashing, indexing as ways of efficient implementation.\n Now consider techniques for efficient multi-dimensional queries.\n Compared to 1-d queries, multi-dimensional queries\n typically produce fewer results\n require us to consider more information\n require more effort to produce results\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-dimensional",
   "query"
  ]
 },
 {
  "question": "May i have exercise about operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "List exercise of operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "Give me exercise about operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "Do you have exercise of operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "Can i have exercise about operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "I need exercise of operation for nd select",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "exercise about operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "I want exercise of operation for nd select",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "Can you give me exercise about operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "Can you give me some exercise of operation for nd select ?",
  "answer": "N-dimensional select queries = condition on \u22651 attributes.\n pmr = partial-match retrieval (equality tests), e.g.\n select * from Employees\n where  job = 'Manager' and gender = 'M';\n space = tuple-space queries (range tests), e.g.\n select * from Employees\n where 20 \u2264 age \u2264 50 and 40K \u2264 salary \u2264 60K\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "operation",
   "for",
   "nd",
   "select"
  ]
 },
 {
  "question": "May i have exercise about n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "List exercise of n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "Give me exercise about n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "Do you have exercise of n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "Can i have exercise about n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "I need exercise of n-d selection via heap",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "exercise about n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "I want exercise of n-d selection via heap",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "Can you give me exercise about n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "Can you give me some exercise of n-d selection via heap ?",
  "answer": "Heap files can handle pmr or space using standard method:\n // select * from R where C\n r = openRelation(\"R\",READ);\n for (p = 0; p < nPages(r); p++) {\n     buf = getPage(file(r), p);\n     for (i = 0; i < nTuples(buf); i++) {\n         t = getTuple(buf,i);\n         if (matches(t,C))\n             add t to result set\n     }\n }\n Costpmr  =  Costspace  =  b\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "heap"
  ]
 },
 {
  "question": "May i have exercise about n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "List exercise of n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "Give me exercise about n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "I need exercise of n-d selection via multiple index",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "exercise about n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "I want exercise of n-d selection via multiple index",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of n-d selection via multiple index ?",
  "answer": "DBMSs already support building multiple indexes on a table.\n Which indexes to build depends on which queries are asked.\n create table R (a int, b int, c int);\n create index Rax on R (a);\n create index Rbx on R (b);\n create index Rcx on R (c);\n create index Rabx on R (a,b);\n create index Racx on R (a,c);\n create index Rbcx on R (b,c);\n create index Rallx on R (a,b,c);\n But more indexes \u21d2 space + update overheads.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "selection",
   "via",
   "multiple",
   "index"
  ]
 },
 {
  "question": "May i have exercise about n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "List exercise of n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Give me exercise about n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I need exercise of n-d query and index",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "exercise about n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I want exercise of n-d query and index",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of n-d query and index ?",
  "answer": "Generalised view of pmr and space queries:\n select * from R\n where  a1 op1 C1 and ... and an opn Cn pmr : all opi are equality tests.     space : some opi are range tests.\n Possible approaches to handling such queries ...\n 1. use index on one ai to reduce tuple tests\n 2. use indexes on all ai, and intersect answer sets\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "May i have exercise about n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "List exercise of n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Give me exercise about n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I need exercise of n-d query and index",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "exercise about n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I want exercise of n-d query and index",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of n-d query and index ?",
  "answer": "If using just one of several indexes, which one to use?\n select * from R\n where  a1 op1 C1 and ... and an opn Cn The one with best selectivity for ai opi Ci   (i.e. fewest matches)\n Factors determining selectivity of ai opi Ci\n assume uniform distribution of values in dom(ai)\n equality test on primary key gives at most one match\n equality test on larger dom(ai) \u21d2 less matches\n range test over large part of dom(ai) \u21d2 many matches\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "May i have exercise about n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "List exercise of n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Give me exercise about n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I need exercise of n-d query and index",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "exercise about n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I want exercise of n-d query and index",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of n-d query and index ?",
  "answer": "Implementing selection using one of several indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // choose ai with best selectivity\n TupleIDs = IndexLookup(R,ai,opi,Ci)\n // gives { tid1, tid2, ...} for tuples satisfying aiopiCi\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bqix page numbers\n ...\n Cost = Costindex + bqix    (some pages do not contain answers, bqix > bq)\n DBMSs typically maintain statistics to assist with determining selectivity\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "May i have exercise about n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "List exercise of n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Give me exercise about n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I need exercise of n-d query and index",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "exercise about n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "I want exercise of n-d query and index",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of n-d query and index ?",
  "answer": "Implementing selection using multiple indices:\n // Query: select * from R where a1op1C1 and ... and anopnCn\n // assumes an index on at least ai\n TupleIDs = IndexLookup(R,a1,op1,C1)\n foreach attribute ai with an index {\n    tids = IndexLookup(R,ai,opi,Ci)\n    TupleIDs = TupleIDs \u2229 tids\n }\n PageIDs = { }\n foreach tid in TupleIDs\n    { PageIDs = PageIDs \u222a {pageOf(tid)} }\n // PageIDs = a set of bq page numbers\n ...\n Cost = k.Costindex + bq     (assuming indexes on k of n attrs)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "n-d",
   "query",
   "and",
   "index"
  ]
 },
 {
  "question": "May i have exercise about bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "List exercise of bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Give me exercise about bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "I need exercise of bitmap index",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "exercise about bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "I want exercise of bitmap index",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of bitmap index ?",
  "answer": "Alternative index structure, focussing on sets of tuples:\n Index contains bit-strings of r bits, one for each value/range\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "May i have exercise about bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "List exercise of bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Give me exercise about bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "I need exercise of bitmap index",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "exercise about bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "I want exercise of bitmap index",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of bitmap index ?",
  "answer": "Answering queries using bitmap index:\n Matches = AllOnes(r)\n foreach attribute A with index {\n    // select ith bit-string for attribute A\n    // based on value associated with A in WHERE\n    Matches = Matches & Bitmaps[A][i]\n }\n // Matches contains 1-bit for each matching tuple\n foreach i in 0..r {\n    if (Matches[i] == 0) continue;\n    t = fetchTuple(i)\n    Results = Results \u222a {t}\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "May i have exercise about bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "List exercise of bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Give me exercise about bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "I need exercise of bitmap index",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "exercise about bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "I want exercise of bitmap index",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of bitmap index ?",
  "answer": "Storage costs for bitmap indexes:\n one bitmap for each value/range for each indexed attribute\n each bitmap has length ceil(r/8) bytes\n e.g. with 50K records and 8KB pages, bitmap fits in one page\n Query execution costs for bitmap indexes:\n read one bitmap for each indexed attribute in query\n perform bitwise AND on bitmaps (in memory)\n read pages containing matching tuples\n Note: bitmaps could index pages (shorter bitmaps, more comparisons)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "bitmap",
   "index"
  ]
 },
 {
  "question": "May i have exercise about hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "List exercise of hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Give me exercise about hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Do you have exercise of hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Can i have exercise about hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "I need exercise of hashing and pmr",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "exercise about hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "I want exercise of hashing and pmr",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Can you give me exercise about hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Can you give me some exercise of hashing and pmr ?",
  "answer": "For a pmr query like\n select * from R where a1 = C1 and ... and an = Cn\n if one ai is the hash key, query is very efficient\n if no ai is the hash key, need to use linear scan\n Can be alleviated using multi-attribute hashing (mah)\n form a composite hash value involving all attributes\n at query time, some components of composite hash are known (allows us to limit the number of data pages which need to be checked)\n MA.hashing works in conjunction with any dynamic hash scheme.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "May i have exercise about hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "List exercise of hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Give me exercise about hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Do you have exercise of hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Can i have exercise about hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "I need exercise of hashing and pmr",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "exercise about hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "I want exercise of hashing and pmr",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Can you give me exercise about hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "Can you give me some exercise of hashing and pmr ?",
  "answer": "Multi-attribute hashing parameters:\n file size = b = 2d pages   \u21d2   use d-bit hash values\n relation has n attributes:   a1, a2, ...an\n attribute ai has hash function hi\n attribute ai contributes di bits (to the combined hash value)\n total bits d = \u2211i=1n di\n a choice vector (cv) specifies for all k ... bit j from hi(ai) contributes bit k in combined hash value\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "hashing",
   "and",
   "pmr"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of ma.hashing example",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of ma.hashing example",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing example ?",
  "answer": "Consider relation Deposit(branch,acctNo,name,amount)\n Assume a small data file with 8 main data pages (plus overflows).\n Hash parameters:    d=3     d1=1    d2=1    d3=1    d4=0\n Note that we ignore the amount attribute (d4=0)\n Assumes that nobody will want to ask queries like\n select * from Deposit where amount=533\n Choice vector is designed taking expected queries into account.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of ma.hashing example",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of ma.hashing example",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing example ?",
  "answer": "Choice vector:\n This choice vector tells us:\n bit 0 in hash comes from bit 0 of hash1(a1)   ( b1,0 )\n bit 1 in hash comes from bit 0 of hash2(a2)   ( b2,0 )\n bit 2 in hash comes from bit 0 of hash3(a3)   ( b3,0 )\n bit 3 in hash comes from bit 1 of hash1(a1)   ( b1,1 )\n etc. etc. etc.   (up to as many bits of hashing as required, e.g. 32)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of ma.hashing example",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of ma.hashing example",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing example ?",
  "answer": "Consider the tuple:\n branch acctNo name amount\n Downtown 101 Johnston 512\n Hash value (page address) is computed by:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "List exercise of ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "I need exercise of ma.hashing hash function",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "exercise about ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "I want exercise of ma.hashing hash function",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing hash function ?",
  "answer": "Auxiliary definitions:\n #define MaxHashSize 32\n typedef unsigned int HashVal;\n // extracts i'th bit from hash value\n #define bit(i,h) (((h) & (1 << (i))) >> (i))\n // choice vector elems\n typedef struct { int attr, int bit } CVelem;\n typedef CVelem ChoiceVec[MaxHashSize];\n // hash function for individual attributes\n HashVal hash1(Tuple t, int i) { ... }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "List exercise of ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "I need exercise of ma.hashing hash function",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "exercise about ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "I want exercise of ma.hashing hash function",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing hash function ?",
  "answer": "Produce combined d-bit hash value for tuple t:\n HashVal hash(Tuple t, ChoiceVec cv, int d)\n {\n     HashVal h[nAttr(t)+1];  // hash for each attr\n     HashVal res = 0, oneBit;\n     int     i, a, b;\n     for (i = 1; i <= nAttr(t); i++)\n         h[i] = hash1(t,i);\n     for (i = 0; i < d; i++) {\n         a = cv[i].attr;\n         b = cv[i].bit;\n         oneBit = bit(b, h[a]);\n         res = res | (oneBit << i);\n     }\n     return res;\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "hash",
   "function"
  ]
 },
 {
  "question": "May i have exercise about exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "List exercise of exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "Give me exercise about exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "Do you have exercise of exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "Can i have exercise about exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "I need exercise of exercise 5 multi-attribute hashing",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "exercise about exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "I want exercise of exercise 5 multi-attribute hashing",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "Can you give me exercise about exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of exercise 5 multi-attribute hashing ?",
  "answer": "Compute the hash value for the tuple\n ('John Smith','BSc(CompSci)',1990,99.5)\n where d=6,   d1=3,   d2=2,   d3=1, and\n cv = <(1,0), (1,1), (2,0), (3,0), (1,2), (2,1), (3,1), (1,3), ...>\n hash1('John Smith') = ...0101010110110100\n hash2('BSc(CompSci)') = ...1011111101101111\n hash3(1990) = ...0001001011000000\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "5",
   "multi-attribute",
   "hashing"
  ]
 },
 {
  "question": "May i have exercise about query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of query with ma.hashing",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of query with ma.hashing",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of query with ma.hashing ?",
  "answer": "In a partial match query:\n values of some attributes are known\n values of other attributes are unknown\n E.g.\n select amount\n from   Deposit\n where  branch = 'Brighton' and name = 'Green'\n for which we use the shorthand   (Brighton, ?, Green, ?)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of query with ma.hashing",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of query with ma.hashing",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of query with ma.hashing ?",
  "answer": "In composite hash for query, values for some bits are unknown:\n What this tells us: any matching tuples must be in pages 101, 111\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of query with ma.hashing",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of query with ma.hashing",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of query with ma.hashing ?",
  "answer": "Consider the query:\n select amount from Deposit where name = 'Green'\n Need to check pages: 100, 101, 110, 111.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "List exercise of ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "I need exercise of ma.hashing query algorithm",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "exercise about ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "I want exercise of ma.hashing query algorithm",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing query algorithm ?",
  "answer": "// Builds the partial hash value (e.g. 10*0*1)\n // Treats query like tuple with some attr values missing\n nstars = 0;\n for each attribute i in query Q {\n     if (hasValue(Q,i)) {\n         set d[i] bits in composite hash\n             using choice vector and hash(Q,i)\n     } else {\n         set d[i] *'s in composite hash\n             using choice vector\n         nstars++;\n     }\n }\n ...\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "List exercise of ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "I need exercise of ma.hashing query algorithm",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "exercise about ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "I want exercise of ma.hashing query algorithm",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing query algorithm ?",
  "answer": "...\n // Use the partial hash to find candidate pages\n r = openRelation(\"R\",READ);\n for (i = 0; i < 2**nstars; i++) {\n     P = composite hash\n     replace *'s in P\n         using i and choice vector\n     Buf = readPage(file(r), P);\n     for each tuple T in Buf {\n         if (T satisfies pmr query)\n             add T to results\n     }\n }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "query",
   "algorithm"
  ]
 },
 {
  "question": "May i have exercise about query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of query cost for ma.hashing",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of query cost for ma.hashing",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of query cost for ma.hashing ?",
  "answer": "Multi-attribute hashing handles a range of query types, e.g.\n select * from R where a=1\n select * from R where d=2\n select * from R where b=3 and c=4\n select * from R where a=5 and b=6 and c=7\n A relation with n attributes has 2n different query types.\n Different query types have different costs   (different no. of *'s)\n Query distribution gives probability pQ of asking each query type Q.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of query cost for ma.hashing",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of query cost for ma.hashing",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of query cost for ma.hashing ?",
  "answer": "For a relation  R(a,b,c,d)  ...\n select * from R where a=1\n -- has 1 specified attribute (a)\n -- has 3 unspecified attributes (b,c,d)\n select * from R where b=5 and d=2\n -- has 2 specified attributes (b,d)\n -- has 2 unspecified attributes (a,c)\n select * from R\n where a=1 and b=5 and c=3 and d=2\n -- has 4 specified attributes (a,b,c,d)\n -- has 0 unspecified attributes\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of query cost for ma.hashing",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of query cost for ma.hashing",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of query cost for ma.hashing ?",
  "answer": "Consider a query of type Q with m attributes unspecified.\n Each unspecified Ai contributes di *'s.\n Total number of *'s is   s  =  \u2211i \u2209 Q di.\n \u21d2 Number of pages to read is   2s  =  \u220fi \u2209 Q 2di.\n Ignoring overflows, Cost(Q) = 2s    (where s is determined by Q)\n Including overflows, Cost(Q) = 2s(1+Ov)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "List exercise of query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Give me exercise about query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Do you have exercise of query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can i have exercise about query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I need exercise of query cost for ma.hashing",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "exercise about query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "I want exercise of query cost for ma.hashing",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me exercise about query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "Can you give me some exercise of query cost for ma.hashing ?",
  "answer": "Min query cost occurs when all attributes are used in query\n Min Costpmr  =  1\n Max query cost occurs when no attributes are specified\n Max Costpmr  =  2d  =  b\n Average cost is given by weighted sum over all query types:\n Avg Costpmr  =  \u2211Q pQ \u220fi \u2209 Q 2di\n Aim to minimise the weighted average query cost over possible query types\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "cost",
   "for",
   "ma.hashing"
  ]
 },
 {
  "question": "May i have exercise about optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "List exercise of optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I need exercise of optimising ma.hashing cost",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "exercise about optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I want exercise of optimising ma.hashing cost",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of optimising ma.hashing cost ?",
  "answer": "For a given application, useful to minimise Costpmr.\n Can be achieved by choosing appropriate values for di   (cv)\n Heuristics:\n distribution of query types (more bits to frequently used attributes)\n size of attribute domain (\u2264 #bits to represent all values in domain)\n discriminatory power (more bits to highly discriminating attributes)\n Trade-off: making query type Qj more efficient makes Qk less efficient.\n This is a combinatorial optimisation problem, and can be handled by standard optimisation techniques e.g. simulated\n annealing.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "optimising",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "List exercise of ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I need exercise of ma.hashing cost example",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "exercise about ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I want exercise of ma.hashing cost example",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing cost example ?",
  "answer": "Consider a table with four attributes:\n (branch, account, name, amount)   (abbreviated to (br,ac,nm,amt) )\n Possible query types, and likelhood of each:\n Query type Cost pQ\n (?, ?, ?, ?) 8 0\n (br, ?, ?, ?) 4 0.25\n (?, ac, ?, ?) 4 0\n (br, ac, ?, ?) 2 0\n (?, ?, nm, ?) 4 0\n (br, ?, nm, ?) 2 0\n (?, ac, nm, ?) 2 0.25\n (br, ac, nm, ?) 1 0\n (?, ?, ?, amt) 8 0\n (br, ?, ?, amt) 4 0\n (?, ac, ?, amt) 4 0\n (br, ac, ?, amt) 2 0\n (?, ?, nm, amt) 4 0\n (br, ?, nm, amt) 2 0.5\n (?, ac, nm, amt) 2 0\n (br, ac, nm, amt) 1 0\n Cost values are based on choice vector   (dbr = dac = dnm = 1) pQ values can be determined by observation of DB use.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "List exercise of ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I need exercise of ma.hashing cost example",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "exercise about ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I want exercise of ma.hashing cost example",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing cost example ?",
  "answer": "Consider r=106, Nr=100, b=104, d=14.\n Attribute br occurs in 0.5+0.25 used query types \u21d2 allocate many bits to it e.g. d1=6.\n Attribute nm occurs in 0.5+0.25 of queries \u21d2 allocate many bits to it e.g. d3=4.\n Attribute amt occurs in 0.5 of queries \u21d2 allocate less bits to it e.g. d4=2.\n Attribute ac occurs in 0.25 of queries \u21d2 allocate least bits to it e.g. d2=2.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "List exercise of ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Give me exercise about ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Do you have exercise of ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can i have exercise about ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I need exercise of ma.hashing cost example",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "exercise about ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "I want exercise of ma.hashing cost example",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me exercise about ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "Can you give me some exercise of ma.hashing cost example ?",
  "answer": "With bits distributed as: d1=6, d2=2, d3=4, d4=2\n Query type Cost pQ\n (br, ?, ?, ?) 28 = 256 0.25\n (?, ac, nm, ?) 28 = 256 0.25\n (br, ?, nm, amt) 22 = 4 0.5\n Cost  =  0.5 \u00d7 22 + 0.25 \u00d7 28 + 0.25 \u00d7 28  =  130\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "ma.hashing",
   "cost"
  ]
 },
 {
  "question": "May i have exercise about multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "List exercise of multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Give me exercise about multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "I need exercise of multi-dimensional tree index",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "exercise about multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "I want exercise of multi-dimensional tree index",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-dimensional tree index ?",
  "answer": "Over the last 20 years, from a range of problem areas\n different multi-d tree index schemes have been proposed\n varying primarily in how they partition tuple-space\n Consider three popular schemes:   kd-trees, Quad-trees, R-trees.\n Example data for multi-d trees is based on the following relation:\n create table Rel (\n     X char(1) check (X between 'a' and 'z'),\n     Y integer check (Y between 0 and 9)\n );\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "May i have exercise about multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "List exercise of multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Give me exercise about multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Do you have exercise of multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Can i have exercise about multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "I need exercise of multi-dimensional tree index",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "exercise about multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "I want exercise of multi-dimensional tree index",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Can you give me exercise about multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-dimensional tree index ?",
  "answer": "Example tuples:\n Rel('a',1)  Rel('a',5)  Rel('b',2)  Rel('d',1)\n Rel('d',2)  Rel('d',4)  Rel('d',8)  Rel('g',3)\n Rel('j',7)  Rel('m',1)  Rel('r',5)  Rel('z',9)\n The tuple-space for the above tuples:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-dimensional",
   "tree",
   "index"
  ]
 },
 {
  "question": "May i have exercise about kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "List exercise of kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Give me exercise about kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Do you have exercise of kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Can i have exercise about kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "I need exercise of kd-trees",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "exercise about kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "I want exercise of kd-trees",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Can you give me exercise about kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of kd-trees ?",
  "answer": "kd-trees are multi-way search trees where\n each level of the tree partitions on a different attribute\n each node contains n-1 key values, pointers to n subtrees\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "May i have exercise about kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "List exercise of kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Give me exercise about kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Do you have exercise of kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Can i have exercise about kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "I need exercise of kd-trees",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "exercise about kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "I want exercise of kd-trees",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Can you give me exercise about kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of kd-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "kd-trees"
  ]
 },
 {
  "question": "May i have exercise about searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "List exercise of searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "Give me exercise about searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "Do you have exercise of searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "Can i have exercise about searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "I need exercise of searching in kd-trees",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "exercise about searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "I want exercise of searching in kd-trees",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "Can you give me exercise about searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of searching in kd-trees ?",
  "answer": "// Started by Search(Q, R, 0, kdTreeRoot)\n Search(Query Q, Relation R, Level L, Node N)\n {\n    if (isDataPage(N)) {\n       Buf = getPage(fileOf(R),idOf(N))\n       check Buf for matching tuples\n    } else {\n       a = attrLev[L]\n       if (!hasValue(Q,a))\n          nextNodes = all children of N\n       else {\n          val = getAttr(Q,a)\n          nextNodes = find(N,Q,a,val)\n       }\n       for each C in nextNodes\n          Search(Q, R, L+1, C)\n }  }\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "kd-trees"
  ]
 },
 {
  "question": "May i have exercise about quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "List exercise of quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Give me exercise about quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Do you have exercise of quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can i have exercise about quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "I need exercise of quad tree",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "exercise about quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "I want exercise of quad tree",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can you give me exercise about quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can you give me some exercise of quad tree ?",
  "answer": "Quad trees use regular, disjoint partitioning of tuple space.\n for 2d, partition space into quadrants (NW, NE, SW, SE)\n each quadrant can be further subdivided into four, etc.\n Example:\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "May i have exercise about quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "List exercise of quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Give me exercise about quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Do you have exercise of quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can i have exercise about quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "I need exercise of quad tree",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "exercise about quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "I want exercise of quad tree",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can you give me exercise about quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can you give me some exercise of quad tree ?",
  "answer": "Basis for the partitioning:\n a quadrant that has no sub-partitions is a leaf quadrant\n each leaf quadrant maps to a single data page\n subdivide until points in each quadrant fit into one data page\n ideal: same number of points in each leaf quadrant (balanced)\n point density varies over space \u21d2 different regions require different levels of partitioning\n this means that the tree is not necessarily balanced\n Note: effective for d\u22645, ok for 6\u2264d\u226410, ineffective for d>10\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "May i have exercise about quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "List exercise of quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Give me exercise about quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Do you have exercise of quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can i have exercise about quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "I need exercise of quad tree",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "exercise about quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "I want exercise of quad tree",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can you give me exercise about quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "Can you give me some exercise of quad tree ?",
  "answer": "The previous partitioning gives this tree structure, e.g.\n In this and following examples, we give coords of top-left,bottom-right of a region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "quad",
   "tree"
  ]
 },
 {
  "question": "May i have exercise about searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "List exercise of searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "Give me exercise about searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "Do you have exercise of searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "Can i have exercise about searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "I need exercise of searching in quad-tree",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "exercise about searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "I want exercise of searching in quad-tree",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "Can you give me exercise about searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "Can you give me some exercise of searching in quad-tree ?",
  "answer": "Space query example:\n Need to traverse: red(NW), green(NW,NE,SW,SE), blue(NE,SE).\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "searching",
   "in",
   "quad-tree"
  ]
 },
 {
  "question": "May i have exercise about r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "List exercise of r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Give me exercise about r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Do you have exercise of r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Can i have exercise about r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "I need exercise of r-trees",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "exercise about r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "I want exercise of r-trees",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Can you give me exercise about r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of r-trees ?",
  "answer": "R-trees use a flexible, overlapping partitioning of tuple space.\n each node in the tree represents a kd hypercube\n its children represent (possibly overlapping) subregions\n the child regions do not need to cover the entire parent region\n Overlap and partial cover means:\n can optimize space partitioning wrt data distribution\n so that there are similar numbers of points in each region\n Aim: height-balanced, partly-full index pages   (cf. B-tree)\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "May i have exercise about r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "List exercise of r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Give me exercise about r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Do you have exercise of r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Can i have exercise about r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "I need exercise of r-trees",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "exercise about r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "I want exercise of r-trees",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Can you give me exercise about r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of r-trees ?",
  "answer": "",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "r-trees"
  ]
 },
 {
  "question": "May i have exercise about insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "List exercise of insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "Give me exercise about insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "Do you have exercise of insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "Can i have exercise about insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "I need exercise of insertion into r-tree",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "exercise about insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "I want exercise of insertion into r-tree",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "Can you give me exercise about insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "Can you give me some exercise of insertion into r-tree ?",
  "answer": "Insertion of an object R occurs as follows:\n start at root, look for children that completely contain R\n if no child completely contains R, choose one of the children and expand its boundaries so that it does contain\n R\n if several children contain R, choose one and proceed to child\n repeat above containment search in children of current node\n once we reach data page, insert R if there is room\n if no room in data page, replace by two data pages\n partition existing objects between two data pages\n update node pointing to data pages (may cause B-tree-like propagation of node changes up into tree)\n Note that R may be a point or a polygon.\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "insertion",
   "into",
   "r-tree"
  ]
 },
 {
  "question": "May i have exercise about query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "List exercise of query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "Give me exercise about query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "Do you have exercise of query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "Can i have exercise about query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "I need exercise of query with r-trees",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "exercise about query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "I want exercise of query with r-trees",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "Can you give me exercise about query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "Can you give me some exercise of query with r-trees ?",
  "answer": "Designed to handle space queries and \"where-am-I\" queries.\n \"Where-am-I\" query: find all regions containing a given point P:\n start at root, select all children whose subregions contain P\n if there are zero such regions, search finishes with P not found\n otherwise, recursively search within node for each subregion\n once we reach a leaf, we know that region contains P\n Space (region) queries are handled in a similar way\n we traverse down any path that intersects the query region\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "query",
   "with",
   "r-trees"
  ]
 },
 {
  "question": "May i have exercise about multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "List exercise of multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Give me exercise about multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Do you have exercise of multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can i have exercise about multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I need exercise of multi-d tree in postgresql",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "exercise about multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "I want exercise of multi-d tree in postgresql",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me exercise about multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "Can you give me some exercise of multi-d tree in postgresql ?",
  "answer": "Up to version 8.2, PostgreSQL had R-tree implementation\n Superseded by GiST = Generalized Search Trees\n GiST indexes parameterise: data type, searching, splitting\n via seven user-defined functions (e.g. picksplit())\n GiST trees have the following structural constraints:\n every node is at least fraction f full (e.g. 0.5)\n the root node has at least two children (unless also a leaf)\n all leaves appear at the same level\n Details: src/backend/access/gist\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "multi-d",
   "tree",
   "in",
   "postgresql"
  ]
 },
 {
  "question": "May i have exercise about cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "List exercise of cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "Give me exercise about cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "Do you have exercise of cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "Can i have exercise about cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "I need exercise of cost of search in multi-d tree",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "exercise about cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "I want exercise of cost of search in multi-d tree",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "Can you give me exercise about cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 },
 {
  "question": "Can you give me some exercise of cost of search in multi-d tree ?",
  "answer": "Difficult to determine cost precisely.\n Best case: pmr query where all attributes have known values\n in kd-trees and quad-trees, follow single tree path\n cost is equal to depth D of tree\n in R-trees, may follow several paths (overlapping partitions)\n Typical case: some attributes are unknown or defined by range\n need to visit multiple sub-trees\n how many depends on: range, choice-points in tree nodes\n Produced: 30 Aug 2018\n",
  "intent": "exercise",
  "key_words": [
   "exercise",
   "cost",
   "of",
   "search",
   "in",
   "multi-d",
   "tree"
  ]
 }
]