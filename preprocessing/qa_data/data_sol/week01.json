[
 {
  "question": "How to solve comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "How to resolve comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "How to mitigate comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Solution for comp9315",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Provide me some Solution for comp9315",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "mitigation for comp9315",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "How to stop comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "How to defend comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "How to get secured against comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Solution, comp9315",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "solution",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "How to solve web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "How to resolve web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "How to mitigate web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Solution for web site",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Provide me some Solution for web site",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "mitigation for web site",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "How to stop web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "How to defend web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "How to get secured against web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Solution, web site",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "solution",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "How to solve lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "How to resolve lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "How to mitigate lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Solution for lecturer",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Provide me some Solution for lecturer",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "mitigation for lecturer",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "How to stop lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "How to defend lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "How to get secured against lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Solution, lecturer",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "solution",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "How to solve course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "How to resolve course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "How to mitigate course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Solution for course admin",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Provide me some Solution for course admin",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "mitigation for course admin",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "How to stop course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "How to defend course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "How to get secured against course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Solution, course admin",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "solution",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "How to solve course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "How to resolve course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "How to mitigate course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Solution for course goal",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Provide me some Solution for course goal",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "mitigation for course goal",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "How to stop course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "How to defend course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "How to get secured against course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Solution, course goal",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "solution",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "How to solve learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to resolve learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to mitigate learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Solution for learning teaching",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Provide me some Solution for learning teaching",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "mitigation for learning teaching",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to stop learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to defend learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to get secured against learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Solution, learning teaching",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to solve learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to resolve learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to mitigate learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Solution for learning teaching",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Provide me some Solution for learning teaching",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "mitigation for learning teaching",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to stop learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to defend learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to get secured against learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Solution, learning teaching",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "solution",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "How to solve rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "How to resolve rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "How to mitigate rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Solution for rough schedule",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Provide me some Solution for rough schedule",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "mitigation for rough schedule",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "How to stop rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "How to defend rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "How to get secured against rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Solution, rough schedule",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "solution",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "How to solve textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "How to resolve textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "How to mitigate textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Solution for textbook",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Provide me some Solution for textbook",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "mitigation for textbook",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "How to stop textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "How to defend textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "How to get secured against textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Solution, textbook",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "solution",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "How to solve pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "How to resolve pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "How to mitigate pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Solution for pre-requisites",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Provide me some Solution for pre-requisites",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "mitigation for pre-requisites",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "How to stop pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "How to defend pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "How to get secured against pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Solution, pre-requisites",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "solution",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "How to solve exercise 1 sql (revision) ?",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "How to resolve exercise 1 sql (revision) ?",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "How to mitigate exercise 1 sql (revision) ?",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "Solution for exercise 1 sql (revision)",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "Provide me some Solution for exercise 1 sql (revision)",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "mitigation for exercise 1 sql (revision)",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "How to stop exercise 1 sql (revision) ?",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "How to defend exercise 1 sql (revision) ?",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "How to get secured against exercise 1 sql (revision) ?",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "Solution, exercise 1 sql (revision)",
  "answer": "Given the following schema:\n Students(sid, name, degree, ...) e.g. Students(3322111, 'John Smith', 'MEngSc', ...) Courses(cid, code, term, title, ...) e.g. Courses(1732, 'COMP9311', '12s1', 'Databases', ...) Enrolments(sid, cid, mark, grade) e.g. Enrolments(3322111, 1732, 50, 'PS') Write an SQL query to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "1",
   "sql",
   "(revision)"
  ]
 },
 {
  "question": "How to solve exercise 2 unix file i o (revision) ?",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "How to resolve exercise 2 unix file i o (revision) ?",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "How to mitigate exercise 2 unix file i o (revision) ?",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "Solution for exercise 2 unix file i o (revision)",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "Provide me some Solution for exercise 2 unix file i o (revision)",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "mitigation for exercise 2 unix file i o (revision)",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "How to stop exercise 2 unix file i o (revision) ?",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "How to defend exercise 2 unix file i o (revision) ?",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "How to get secured against exercise 2 unix file i o (revision) ?",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "Solution, exercise 2 unix file i o (revision)",
  "answer": "Write a C program that reads a file, block-by-block.\n Command-line parameters:\n block size in bytes\n name of input file\n Use low-level C operations: open, read.\n Count and display how many blocks/bytes read.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "2",
   "unix",
   "file",
   "i",
   "o",
   "(revision)"
  ]
 },
 {
  "question": "How to solve prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to resolve prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to mitigate prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Solution for prac work",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Provide me some Solution for prac work",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "mitigation for prac work",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to stop prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to defend prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to get secured against prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Solution, prac work",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to solve prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to resolve prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to mitigate prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Solution for prac work",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Provide me some Solution for prac work",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "mitigation for prac work",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to stop prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to defend prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to get secured against prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Solution, prac work",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "solution",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "How to solve assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to resolve assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to mitigate assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Solution for assignment",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Provide me some Solution for assignment",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "mitigation for assignment",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to stop assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to defend assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to get secured against assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Solution, assignment",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to solve assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to resolve assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to mitigate assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Solution for assignment",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Provide me some Solution for assignment",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "mitigation for assignment",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to stop assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to defend assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to get secured against assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Solution, assignment",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "solution",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "How to solve quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "How to resolve quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "How to mitigate quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Solution for quiz",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Provide me some Solution for quiz",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "mitigation for quiz",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "How to stop quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "How to defend quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "How to get secured against quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Solution, quiz",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "solution",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "How to solve exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to resolve exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to mitigate exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Solution for exam",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Provide me some Solution for exam",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "mitigation for exam",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to stop exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to defend exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to get secured against exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Solution, exam",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to solve exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to resolve exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to mitigate exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Solution for exam",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Provide me some Solution for exam",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "mitigation for exam",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to stop exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to defend exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to get secured against exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Solution, exam",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "solution",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "How to solve assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "How to resolve assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "How to mitigate assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Solution for assessment summary",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Provide me some Solution for assessment summary",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "mitigation for assessment summary",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "How to stop assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "How to defend assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "How to get secured against assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Solution, assessment summary",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "solution",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "How to solve relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "How to resolve relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "How to mitigate relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Solution for relational dbms functionality",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Provide me some Solution for relational dbms functionality",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "mitigation for relational dbms functionality",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "How to stop relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "How to defend relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "How to get secured against relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Solution, relational dbms functionality",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "How to solve data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to resolve data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to mitigate data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Solution for data definition",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Provide me some Solution for data definition",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "mitigation for data definition",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to stop data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to defend data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to get secured against data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Solution, data definition",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to solve data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to resolve data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to mitigate data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Solution for data definition",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Provide me some Solution for data definition",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "mitigation for data definition",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to stop data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to defend data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to get secured against data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Solution, data definition",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to solve data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to resolve data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to mitigate data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Solution for data definition",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Provide me some Solution for data definition",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "mitigation for data definition",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to stop data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to defend data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to get secured against data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Solution, data definition",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "solution",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "How to solve data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to resolve data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to mitigate data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Solution for data modification",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Provide me some Solution for data modification",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "mitigation for data modification",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to stop data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to defend data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to get secured against data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Solution, data modification",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to solve data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to resolve data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to mitigate data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Solution for data modification",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Provide me some Solution for data modification",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "mitigation for data modification",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to stop data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to defend data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to get secured against data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Solution, data modification",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "solution",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "How to solve query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to resolve query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to mitigate query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Solution for query evaluator",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Provide me some Solution for query evaluator",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "mitigation for query evaluator",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to stop query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to defend query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to get secured against query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Solution, query evaluator",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to solve query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to resolve query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to mitigate query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Solution for query evaluator",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Provide me some Solution for query evaluator",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "mitigation for query evaluator",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to stop query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to defend query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to get secured against query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Solution, query evaluator",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "solution",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "How to solve dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to resolve dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to mitigate dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution for dbms architecture",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Provide me some Solution for dbms architecture",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "mitigation for dbms architecture",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to stop dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to defend dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to get secured against dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution, dbms architecture",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to solve dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to resolve dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to mitigate dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution for dbms architecture",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Provide me some Solution for dbms architecture",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "mitigation for dbms architecture",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to stop dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to defend dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to get secured against dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution, dbms architecture",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to solve dbms architecture ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to resolve dbms architecture ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to mitigate dbms architecture ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution for dbms architecture",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Provide me some Solution for dbms architecture",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "mitigation for dbms architecture",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to stop dbms architecture ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to defend dbms architecture ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to get secured against dbms architecture ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution, dbms architecture",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to solve dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to resolve dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to mitigate dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution for dbms architecture",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Provide me some Solution for dbms architecture",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "mitigation for dbms architecture",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to stop dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to defend dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to get secured against dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Solution, dbms architecture",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "solution",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "How to solve database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "How to resolve database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "How to mitigate database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Solution for database engine operation",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for database engine operation",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "mitigation for database engine operation",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "How to stop database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "How to defend database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "How to get secured against database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Solution, database engine operation",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "solution",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "How to solve relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to resolve relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to mitigate relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Solution for relational algebra",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "mitigation for relational algebra",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to stop relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to defend relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to get secured against relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Solution, relational algebra",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to solve relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to resolve relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to mitigate relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Solution for relational algebra",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "mitigation for relational algebra",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to stop relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to defend relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to get secured against relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Solution, relational algebra",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to solve exercise 3 relational algebra ?",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to resolve exercise 3 relational algebra ?",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to mitigate exercise 3 relational algebra ?",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Solution for exercise 3 relational algebra",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Provide me some Solution for exercise 3 relational algebra",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "mitigation for exercise 3 relational algebra",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to stop exercise 3 relational algebra ?",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to defend exercise 3 relational algebra ?",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to get secured against exercise 3 relational algebra ?",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Solution, exercise 3 relational algebra",
  "answer": "Using the same student/course/enrolment schema as above:\n Students(sid, name, degree, ...) Courses(cid, code, term, title, ...) Enrolments(sid, cid, mark, grade) Write relational algebra expressions to solve the problem\n find all students who passed COMP9315 in 18s2\n for each student, give (student ID, name, mark)\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "3",
   "relational",
   "algebra"
  ]
 },
 {
  "question": "How to solve describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to resolve describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to mitigate describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution for describing relational algebra operation",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for describing relational algebra operation",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "mitigation for describing relational algebra operation",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to stop describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to defend describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to get secured against describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution, describing relational algebra operation",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "solution",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to solve relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to resolve relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to mitigate relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution for relational algebra operation",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra operation",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "mitigation for relational algebra operation",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to stop relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to defend relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to get secured against relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution, relational algebra operation",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to solve relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to resolve relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to mitigate relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution for relational algebra operation",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra operation",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "mitigation for relational algebra operation",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to stop relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to defend relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to get secured against relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution, relational algebra operation",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to solve relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to resolve relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to mitigate relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution for relational algebra operation",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra operation",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "mitigation for relational algebra operation",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to stop relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to defend relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to get secured against relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution, relational algebra operation",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to solve relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to resolve relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to mitigate relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution for relational algebra operation",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra operation",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "mitigation for relational algebra operation",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to stop relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to defend relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to get secured against relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution, relational algebra operation",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to solve relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to resolve relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to mitigate relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution for relational algebra operation",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra operation",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "mitigation for relational algebra operation",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to stop relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to defend relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to get secured against relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution, relational algebra operation",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to solve relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to resolve relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to mitigate relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution for relational algebra operation",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Provide me some Solution for relational algebra operation",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "mitigation for relational algebra operation",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to stop relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to defend relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to get secured against relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Solution, relational algebra operation",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "solution",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "How to solve postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "How to resolve postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "How to mitigate postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Solution for postgresql",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "mitigation for postgresql",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "How to stop postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "How to defend postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "How to get secured against postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Solution, postgresql",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "solution",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "How to solve postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "How to resolve postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "How to mitigate postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Solution for postgresql online",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql online",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "mitigation for postgresql online",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "How to stop postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "How to defend postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "How to get secured against postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Solution, postgresql online",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "How to solve user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "How to resolve user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "How to mitigate user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Solution for user view of postgresql",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Provide me some Solution for user view of postgresql",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "mitigation for user view of postgresql",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "How to stop user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "How to defend user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "How to get secured against user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Solution, user view of postgresql",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "solution",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "How to solve postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to resolve postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to mitigate postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution for postgresql functionality",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql functionality",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "mitigation for postgresql functionality",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to stop postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to defend postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to get secured against postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution, postgresql functionality",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to solve postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to resolve postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to mitigate postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution for postgresql functionality",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql functionality",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "mitigation for postgresql functionality",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to stop postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to defend postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to get secured against postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution, postgresql functionality",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to solve postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to resolve postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to mitigate postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution for postgresql functionality",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql functionality",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "mitigation for postgresql functionality",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to stop postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to defend postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to get secured against postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution, postgresql functionality",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to solve postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to resolve postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to mitigate postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution for postgresql functionality",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql functionality",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "mitigation for postgresql functionality",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to stop postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to defend postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to get secured against postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution, postgresql functionality",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to solve postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to resolve postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to mitigate postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution for postgresql functionality",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql functionality",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "mitigation for postgresql functionality",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to stop postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to defend postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to get secured against postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution, postgresql functionality",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to solve postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to resolve postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to mitigate postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution for postgresql functionality",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql functionality",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "mitigation for postgresql functionality",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to stop postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to defend postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to get secured against postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Solution, postgresql functionality",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "How to solve postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to resolve postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to mitigate postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Solution for postgresql architecture",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql architecture",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "mitigation for postgresql architecture",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to stop postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to defend postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to get secured against postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Solution, postgresql architecture",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to solve postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to resolve postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to mitigate postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Solution for postgresql architecture",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql architecture",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "mitigation for postgresql architecture",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to stop postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to defend postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to get secured against postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Solution, postgresql architecture",
  "answer": "Memory/storage architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to solve postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to resolve postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to mitigate postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Solution for postgresql architecture",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql architecture",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "mitigation for postgresql architecture",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to stop postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to defend postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to get secured against postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Solution, postgresql architecture",
  "answer": "File-system architecture:\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "How to solve exercise 4 postgresql data file ?",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "How to resolve exercise 4 postgresql data file ?",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "How to mitigate exercise 4 postgresql data file ?",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "Solution for exercise 4 postgresql data file",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "Provide me some Solution for exercise 4 postgresql data file",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "mitigation for exercise 4 postgresql data file",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "How to stop exercise 4 postgresql data file ?",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "How to defend exercise 4 postgresql data file ?",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "How to get secured against exercise 4 postgresql data file ?",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "Solution, exercise 4 postgresql data file",
  "answer": "PostgreSQL uses OIDs as\n the name of the directory for each database\n the name of the files for each table\n Using the pg_catalog tables, find ..\n the directory for the pizza database\n the data files for the Pizzas and People tables\n Relevant catalog info ...\n pg_database(oid,datname,...) pg_class(oid,relname,...)",
  "intent": "solution",
  "key_words": [
   "exercise",
   "4",
   "postgresql",
   "data",
   "file"
  ]
 },
 {
  "question": "How to solve installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to resolve installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to mitigate installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Solution for installing postgresql",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Provide me some Solution for installing postgresql",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "mitigation for installing postgresql",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to stop installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to defend installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to get secured against installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Solution, installing postgresql",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to solve installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to resolve installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to mitigate installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Solution for installing postgresql",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Provide me some Solution for installing postgresql",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "mitigation for installing postgresql",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to stop installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to defend installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to get secured against installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Solution, installing postgresql",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to solve installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to resolve installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to mitigate installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Solution for installing postgresql",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Provide me some Solution for installing postgresql",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "mitigation for installing postgresql",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to stop installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to defend installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to get secured against installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Solution, installing postgresql",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "solution",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "How to solve using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to resolve using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to mitigate using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Solution for using postgresql for assignment",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Provide me some Solution for using postgresql for assignment",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "mitigation for using postgresql for assignment",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to stop using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to defend using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to get secured against using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Solution, using postgresql for assignment",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to solve using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to resolve using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to mitigate using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Solution for using postgresql for assignment",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Provide me some Solution for using postgresql for assignment",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "mitigation for using postgresql for assignment",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to stop using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to defend using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to get secured against using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Solution, using postgresql for assignment",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to solve using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to resolve using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to mitigate using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Solution for using postgresql for assignment",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Provide me some Solution for using postgresql for assignment",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "mitigation for using postgresql for assignment",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to stop using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to defend using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to get secured against using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Solution, using postgresql for assignment",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "solution",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "How to solve postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to resolve postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to mitigate postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution for postgresql source code",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql source code",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "mitigation for postgresql source code",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to stop postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to defend postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to get secured against postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution, postgresql source code",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to solve postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to resolve postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to mitigate postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution for postgresql source code",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql source code",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "mitigation for postgresql source code",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to stop postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to defend postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to get secured against postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution, postgresql source code",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to solve postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to resolve postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to mitigate postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution for postgresql source code",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql source code",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "mitigation for postgresql source code",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to stop postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to defend postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to get secured against postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution, postgresql source code",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to solve postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to resolve postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to mitigate postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution for postgresql source code",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql source code",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "mitigation for postgresql source code",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to stop postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to defend postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to get secured against postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution, postgresql source code",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to solve postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to resolve postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to mitigate postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution for postgresql source code",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Provide me some Solution for postgresql source code",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "mitigation for postgresql source code",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to stop postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to defend postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to get secured against postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Solution, postgresql source code",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "solution",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to solve storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to resolve storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to mitigate storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Solution for storage management",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Provide me some Solution for storage management",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "mitigation for storage management",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to stop storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to defend storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to get secured against storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Solution, storage management",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to solve storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to resolve storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to mitigate storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Solution for storage management",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Provide me some Solution for storage management",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "mitigation for storage management",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to stop storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to defend storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to get secured against storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Solution, storage management",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "How to solve view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to resolve view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to mitigate view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Solution for view of data",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Provide me some Solution for view of data",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "mitigation for view of data",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to stop view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to defend view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to get secured against view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Solution, view of data",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to solve view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to resolve view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to mitigate view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Solution for view of data",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Provide me some Solution for view of data",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "mitigation for view of data",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to stop view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to defend view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to get secured against view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Solution, view of data",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to solve view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to resolve view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to mitigate view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Solution for view of data",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Provide me some Solution for view of data",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "mitigation for view of data",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to stop view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to defend view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to get secured against view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Solution, view of data",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "solution",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "How to solve storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "How to resolve storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "How to mitigate storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Solution for storage management topic",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Provide me some Solution for storage management topic",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "mitigation for storage management topic",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "How to stop storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "How to defend storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "How to get secured against storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Solution, storage management topic",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to resolve storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to mitigate storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution for storage manager interface",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Provide me some Solution for storage manager interface",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "mitigation for storage manager interface",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to stop storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to defend storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to get secured against storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Solution, storage manager interface",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "solution",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "How to solve from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "How to resolve from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "How to mitigate from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Solution for from symbolic to internal",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Provide me some Solution for from symbolic to internal",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "mitigation for from symbolic to internal",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "How to stop from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "How to defend from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "How to get secured against from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Solution, from symbolic to internal",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "solution",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "How to solve database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to resolve database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to mitigate database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution for database object",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Provide me some Solution for database object",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "mitigation for database object",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to stop database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to defend database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to get secured against database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution, database object",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to solve database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to resolve database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to mitigate database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution for database object",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Provide me some Solution for database object",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "mitigation for database object",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to stop database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to defend database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to get secured against database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution, database object",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to solve database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to resolve database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to mitigate database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution for database object",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Provide me some Solution for database object",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "mitigation for database object",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to stop database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to defend database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to get secured against database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution, database object",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to solve database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to resolve database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to mitigate database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution for database object",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Provide me some Solution for database object",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "mitigation for database object",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to stop database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to defend database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to get secured against database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution, database object",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to solve database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to resolve database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to mitigate database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution for database object",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Provide me some Solution for database object",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "mitigation for database object",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to stop database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to defend database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to get secured against database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution, database object",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to solve database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to resolve database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to mitigate database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution for database object",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Provide me some Solution for database object",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "mitigation for database object",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to stop database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to defend database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to get secured against database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Solution, database object",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "solution",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "How to solve representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to resolve representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to mitigate representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Solution for representing database",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Provide me some Solution for representing database",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "mitigation for representing database",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to stop representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to defend representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to get secured against representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Solution, representing database",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to solve representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to resolve representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to mitigate representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Solution for representing database",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Provide me some Solution for representing database",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "mitigation for representing database",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to stop representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to defend representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to get secured against representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Solution, representing database",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "solution",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "How to solve representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to resolve representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to mitigate representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Solution for representing table",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Provide me some Solution for representing table",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "mitigation for representing table",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to stop representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to defend representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to get secured against representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Solution, representing table",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to solve representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to resolve representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to mitigate representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Solution for representing table",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Provide me some Solution for representing table",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "mitigation for representing table",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to stop representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to defend representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to get secured against representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Solution, representing table",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "solution",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "How to solve exercise 5 table statistic ?",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "How to resolve exercise 5 table statistic ?",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "How to mitigate exercise 5 table statistic ?",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "Solution for exercise 5 table statistic",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "Provide me some Solution for exercise 5 table statistic",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "mitigation for exercise 5 table statistic",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "How to stop exercise 5 table statistic ?",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "How to defend exercise 5 table statistic ?",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "How to get secured against exercise 5 table statistic ?",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "Solution, exercise 5 table statistic",
  "answer": "Using the PostgreSQL catalog, write a PLpgSQL function\n to return table name and #tuples in table\n for all tables in the public schema\n create type TableInfo as (table text, ntuples int); create function pop() returns setof TableInfo ... Hint: you will need to use dynamically-generated queries.\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "5",
   "table",
   "statistic"
  ]
 },
 {
  "question": "How to solve exercise 6 extracting a schema ?",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "How to resolve exercise 6 extracting a schema ?",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "How to mitigate exercise 6 extracting a schema ?",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "Solution for exercise 6 extracting a schema",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "Provide me some Solution for exercise 6 extracting a schema",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "mitigation for exercise 6 extracting a schema",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "How to stop exercise 6 extracting a schema ?",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "How to defend exercise 6 extracting a schema ?",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "How to get secured against exercise 6 extracting a schema ?",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 },
 {
  "question": "Solution, exercise 6 extracting a schema",
  "answer": "Write a PLpgSQL function:\n function schema() returns setof text\n giving a list of table schemas in the public schema\n It should behave as follows:\n db=# select * from schema();             tables ---------------------------  table1(x, y, z)  table2(a, b)  table3(id, name, address) ... Produced: 26 Jul 2018\n",
  "intent": "solution",
  "key_words": [
   "exercise",
   "6",
   "extracting",
   "a",
   "schema"
  ]
 }
]