[
 {
  "question": "What is comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "What does comp9315 mean ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Tell me something about comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "comp9315",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Explain comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Elaborate comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Can you tell me about comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "What do you know about comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "What can you tell me about comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "I want to know aboutcomp9315",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "Do you have information about comp9315 ?",
  "answer": "DBMS Implementation\n ( Data structures and algorithms inside relational DBMSs )\n Lecturer: \u00a0 John Shepherd\n",
  "intent": "description",
  "key_words": [
   "comp9315"
  ]
 },
 {
  "question": "What is web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "What does web site mean ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Tell me something about web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "web site",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Explain web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Elaborate web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Can you tell me about web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "What do you know about web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "What can you tell me about web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "I want to know aboutweb site",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "Do you have information about web site ?",
  "answer": "http://www.cse.unsw.edu.au/~cs9315/\n (If WebCMS unavailable, use http://www.cse.unsw.edu.au/~cs9315/18s2/)\n",
  "intent": "description",
  "key_words": [
   "web",
   "site"
  ]
 },
 {
  "question": "What is lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "What does lecturer mean ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Tell me something about lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "lecturer",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Explain lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Elaborate lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Can you tell me about lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "What do you know about lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "What can you tell me about lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "I want to know aboutlecturer",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "Do you have information about lecturer ?",
  "answer": "Name: John Shepherd\n Office: K17-410 (turn right from lift)\n Phone: 9385 6494\n Email: jas@cse.unsw.edu.au\n Consult: Mon 2-3, Wed 11-12 \u00a0 (in K17-410)\n Research: Information Extraction/Integration  Information Retrieval/Web Search  e-Learning Technologies  Multimedia Databases  Query Processing\n",
  "intent": "description",
  "key_words": [
   "lecturer"
  ]
 },
 {
  "question": "What is course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "What does course admin mean ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Tell me something about course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "course admin",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Explain course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Elaborate course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Can you tell me about course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "What do you know about course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "What can you tell me about course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "I want to know aboutcourse admin",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "Do you have information about course admin ?",
  "answer": "Name: Jashank Jeremy\n Email: cs9315@cse.unsw.edu.au   (email goes to both Jashank and me)\n Reasons: Enrolment problems  Special consideration  Detailed assignment questions  Technical issues\n",
  "intent": "description",
  "key_words": [
   "course",
   "admin"
  ]
 },
 {
  "question": "What is course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "What does course goal mean ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Tell me something about course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "course goal",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Explain course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Elaborate course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Can you tell me about course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "What do you know about course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "What can you tell me about course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "I want to know aboutcourse goal",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "Do you have information about course goal ?",
  "answer": "Introduce you to:\n architecture(s) of relational DBMSs \u00a0(via PostgreSQL)\n algorithms/data-structures for data-intensive computing\n representation of relational database objects\n representation of relational operators (sel,proj,join)\n techniques for processing SQL queries\n techniques for managing concurrent transactions\n concepts in non-relational databases\n Develop skills in:\n analysing the performance of data-intensive algorithms\n the use of C to implement data-intensive algorithms\n",
  "intent": "description",
  "key_words": [
   "course",
   "goal"
  ]
 },
 {
  "question": "What is learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What does learning teaching mean ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Tell me something about learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "learning teaching",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Explain learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Elaborate learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Can you tell me about learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What do you know about learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What can you tell me about learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "I want to know aboutlearning teaching",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Do you have information about learning teaching ?",
  "answer": " Textbooks: describe some syllabus topics in detail\n Notes: describe all syllabus topics in some detail\n Lecture slides: summarise Notes and contain exercises\n Lecture videos: for review or if you miss a lecture, or are in WEB stream\n Readings: research papers on selected topics\n The onus is on you to use this material.\n  Note: Lecture slides, exercises and videos will be available only after the lecture.\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What's available for you?",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What is learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What does learning teaching mean ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Tell me something about learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "learning teaching",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Explain learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Elaborate learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Can you tell me about learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What do you know about learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What can you tell me about learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "I want to know aboutlearning teaching",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "Do you have information about learning teaching ?",
  "answer": "Things that you need to do:\n Exercises: tutorial-like questions\n Prac work: lab-class-like exercises\n Assignments: large/important practical exercises\n On-line quizzes: for self-assessment\n Dependencies:\n Exercises \u2192 Exam (theory part)\n Prac work \u2192 Assignments \u2192 Exam (prac part)\n There are no tute/lab classes; use Forum, Email, Consultations\n debugging is best done in person \u00a0(where full environment is visible)\n",
  "intent": "description",
  "key_words": [
   "learning",
   "teaching"
  ]
 },
 {
  "question": "What is rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "What does rough schedule mean ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Tell me something about rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "rough schedule",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Explain rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Elaborate rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Can you tell me about rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "What do you know about rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "What can you tell me about rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "I want to know aboutrough schedule",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "Do you have information about rough schedule ?",
  "answer": "Week 01 intro, dbms review, dbms architecture\n Week 02 storage: disks, buffers, pages\n Week 03 RA ops: scan, sort, projection\n Week 04 selection: heaps, hashing, indexes\n Week 05 no lectures\n Week 06 selection: N-d matching, similarity\n Week 07 joins: naive, sort-merge, hash join\n Week 08 query processing, optimisation\n Week 09 transactions: concurrency, recovery\n \"Mid\"-term no lectures\n Week 10 distributed and non-SQL databases\n",
  "intent": "description",
  "key_words": [
   "rough",
   "schedule"
  ]
 },
 {
  "question": "What is textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "What does textbook mean ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Tell me something about textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "textbook",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Explain textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Elaborate textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Can you tell me about textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "What do you know about textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "What can you tell me about textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "I want to know abouttextbook",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "Do you have information about textbook ?",
  "answer": "No official text book; several are suitable ...\n Garcia-Molina, Ullman, Widom  \"Database Systems: The Complete Book\"\n Ramakrishnan, Gehrke  \"Database Systems Management\"\n Silberschatz, Korth, Sudarshan  \"Database System Concepts\"\n Kifer, Bernstein, Lewis  \"Database Systems: An algorithmic-oriented approach\"\n Elmasri, Navathe  \"Database Systems: Models, languages, design ...\"\n but not all cover all topics in detail\n",
  "intent": "description",
  "key_words": [
   "textbook"
  ]
 },
 {
  "question": "What is pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "What does pre-requisites mean ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Tell me something about pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "pre-requisites",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Explain pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Elaborate pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Can you tell me about pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "What do you know about pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "What can you tell me about pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "I want to know aboutpre-requisites",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "Do you have information about pre-requisites ?",
  "answer": "We assume that you are already familiar with\n the C language and programming in C (or C++)  \u00a0 (e.g. completed an intro programming course in C)\n developing applications on RDBMSs  \u00a0 (SQL, [relational algebra] \u00a0 e.g. an intro DB course)\n basic ideas about file organisation and file manipulation  \u00a0 (Unix open, close, lseek, read, write, flock)\n sorting algorithms, data structures for searching  \u00a0 (sorting, trees, hashing \u00a0 e.g. a data structures course)\n If you don't know this material, you will struggle to pass ...\n",
  "intent": "description",
  "key_words": [
   "pre-requisites"
  ]
 },
 {
  "question": "What is prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What does prac work mean ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Tell me something about prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "prac work",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Explain prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Elaborate prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Can you tell me about prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What do you know about prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What can you tell me about prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "I want to know aboutprac work",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Do you have information about prac work ?",
  "answer": "In this course, we use PostgreSQL v10.4 \u00a0 (compulsory)\n Prac Work requires you to compile PostgreSQL from source code\n instructions explain how to do this on Linux at CSE\n also works easily on Linux and Mac OSX at home\n PostgreSQL docs describe how to compile for Windows\n Make sure you do the first Prac Exercise when it becomes available.\n Sort out any problems ASAP (preferably at a consultation).\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What is prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What does prac work mean ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Tell me something about prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "prac work",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Explain prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Elaborate prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Can you tell me about prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What do you know about prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What can you tell me about prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "I want to know aboutprac work",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "Do you have information about prac work ?",
  "answer": "PostgreSQL is a large software system:\n > 1700 source code files in the core engine/clients\n > 1,000,000 lines of C code in the core\n You won't be required to understand all of it :-)\n You will need to learn to navigate this code effectively.\n Will discuss relevant parts in lectures to help with this.\n PostgreSQL books?\n tend to add little to the manual, and cost a lot\n",
  "intent": "description",
  "key_words": [
   "prac",
   "work"
  ]
 },
 {
  "question": "What is assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What does assignment mean ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Tell me something about assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "assignment",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Explain assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Elaborate assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Can you tell me about assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What do you know about assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What can you tell me about assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "I want to know aboutassignment",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Do you have information about assignment ?",
  "answer": "Schedule of assignment work:\n Ass Description Due Marks\n 1 Storage Management Week 5 10%\n 2 Query Processing Week 10 15%\n Assignments will be carried out in pairs (see WebCMS).\n Choose own online tools to share code (e.g. git, DropBox).\n Ultimately, submission is via CSE's give system.\n Will spend some time in lectures reviewing assignments.\n Assignments will require up-front code-reading (see Pracs).\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What is assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What does assignment mean ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Tell me something about assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "assignment",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Explain assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Elaborate assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Can you tell me about assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What do you know about assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What can you tell me about assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "I want to know aboutassignment",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "Do you have information about assignment ?",
  "answer": "Don't leave assignments to the last minute\n they require significant code reading\n as well as code writing and testing\n and, you can submit early.\n \"Carrot\": bonus marks are available for early submissions.\n \"Stick\": marks deducted (from max) for late submissions.\n",
  "intent": "description",
  "key_words": [
   "assignment"
  ]
 },
 {
  "question": "What is quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "What does quiz mean ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Tell me something about quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "quiz",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Explain quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Elaborate quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Can you tell me about quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "What do you know about quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "What can you tell me about quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "I want to know aboutquiz",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "Do you have information about quiz ?",
  "answer": "Over the course of the semester ...\n six online quizzes\n taken in your own time (but there are deadlines)\n each quiz is worth a small number of marks\n Quizzes are primarily a review tool to check progress.\n But they contribute 15% of your overall mark for the course.\n",
  "intent": "description",
  "key_words": [
   "quiz"
  ]
 },
 {
  "question": "What is exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What does exam mean ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Tell me something about exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "exam",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Explain exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Elaborate exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Can you tell me about exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What do you know about exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What can you tell me about exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "I want to know aboutexam",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Do you have information about exam ?",
  "answer": "Three-hour exam in the November exam period.\n Held in the CSE Labs, but mainly a written (typed) Exam.\n The Course Notes (only) will be available in the exam.\n Things that we can't reasonably test in the exam:\n writing large programs, running major experiments\n Everything else is potentially examinable.\n Contains: descriptive questions, analysis, small programming exercises.\n Exam contributes 60% of the overall mark for this course.\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What is exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What does exam mean ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Tell me something about exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "exam",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Explain exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Elaborate exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Can you tell me about exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What do you know about exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What can you tell me about exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "I want to know aboutexam",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "Do you have information about exam ?",
  "answer": "If you cannot attend the final exam ...\n because of documented illness/misadventure\n and you have reasonable marks in Ass+Quiz\n then you will be offered a Supplementary Exam.\n There is no other way to get a Supp Exam.\n You get one chance at passing the exam\n make sure you're fit and healthy on exam day\n score more than 24/60 (which is only 40%)\n",
  "intent": "description",
  "key_words": [
   "exam"
  ]
 },
 {
  "question": "What is assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "What does assessment summary mean ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Tell me something about assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "assessment summary",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Explain assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Elaborate assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Can you tell me about assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "What do you know about assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "What can you tell me about assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "I want to know aboutassessment summary",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "Do you have information about assessment summary ?",
  "answer": "Your final mark/grade is computed according to the following:\n ass1   = mark for assignment 1      (out of 10) ass2   = mark for assignment 2      (out of 15) quiz   = mark for on-line quizzes   (out of 15) exam   = mark for final exam        (out of 60) okExam = exam > 24/60           (after scaling)  mark   = ass1 + ass2 + quiz + exam grade  = HD|DN|CR|PS,  if mark \u2265 50 && okExam        = FL,           if mark < 50 && okExam        = UF,           if !okExam Relational Database Revision\n",
  "intent": "description",
  "key_words": [
   "assessment",
   "summary"
  ]
 },
 {
  "question": "What is relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "What does relational dbms functionality mean ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Tell me something about relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "relational dbms functionality",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Explain relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Elaborate relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Can you tell me about relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "What do you know about relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "What can you tell me about relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "I want to know aboutrelational dbms functionality",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "Do you have information about relational dbms functionality ?",
  "answer": "Relational DBMSs provide a variety of functionalities:\n storing/modifying data and meta-data \u00a0(data defintions)\n constraint definition/storage/maintenance/checking\n declarative manipulation of data (via SQL)\n extensibility via views, triggers, stored procedures\n query re-writing (rules), optimisation (indexes)\n transaction processing, concurrency/recovery\n etc. etc. etc.\n Common feature of all relational DBMSs: relational model, SQL.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "dbms",
   "functionality"
  ]
 },
 {
  "question": "What is data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What does data definition mean ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Tell me something about data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "data definition",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Explain data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Elaborate data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Can you tell me about data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What do you know about data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What can you tell me about data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "I want to know aboutdata definition",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Do you have information about data definition ?",
  "answer": "Relational data: relations/tables, tuples, values, types, e.g.\n  create domain WAMvalue float    check (value between 0.0 and 100.0);  create table Students (    id          integer,  -- e.g. 3123456    familyName  text,     -- e.g. 'Smith'    givenName   text,     -- e.g. 'John'    birthDate   date,     -- e.g. '1-Mar-1984'    wam         WAMvalue, -- e.g. 85.4    primary key (id) ); The above adds meta-data to the database.\n DBMSs typically store meta-data as special tables (catalog).\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What is data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What does data definition mean ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Tell me something about data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "data definition",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Explain data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Elaborate data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Can you tell me about data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What do you know about data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What can you tell me about data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "I want to know aboutdata definition",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Do you have information about data definition ?",
  "answer": "Input: DDL statement \u00a0 (e.g. create table)\n Result: meta-data in catalog is modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What is data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What does data definition mean ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Tell me something about data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "data definition",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Explain data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Elaborate data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Can you tell me about data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What do you know about data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What can you tell me about data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "I want to know aboutdata definition",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "Do you have information about data definition ?",
  "answer": "Constraints are an important aspect of data definition:\n attribute (column) constraints\n tuple constraints\n relation (table) constraints\n referential integrity constraints\n Examples:\n create table Employee (    id      integer primary key,    name    varchar(40),    salary  real,    age     integer check (age > 15),    worksIn integer references Department(id),    constraint PayOk check (salary > age*1000) ); On each attempt to change data, DBMS checks constraints.\n",
  "intent": "description",
  "key_words": [
   "data",
   "definition"
  ]
 },
 {
  "question": "What is data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What does data modification mean ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Tell me something about data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "data modification",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Explain data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Elaborate data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Can you tell me about data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What do you know about data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What can you tell me about data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "I want to know aboutdata modification",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Do you have information about data modification ?",
  "answer": "Critical function of DBMS: changing data\n insert new tuples into tables\n delete existing tuples from tables\n update values within existing tuples\n E.g.\n insert into Enrolments(student,course,mark) values (3312345, 5542, 75);  update Enrolments set mark = 77 where  student = 3354321 and course = 5542;  delete Enrolments where student = 3112233;",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What is data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What does data modification mean ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Tell me something about data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "data modification",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Explain data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Elaborate data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Can you tell me about data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What do you know about data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What can you tell me about data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "I want to know aboutdata modification",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "Do you have information about data modification ?",
  "answer": "Input: DML statements\n Result: tuples are added, removed or modified\n",
  "intent": "description",
  "key_words": [
   "data",
   "modification"
  ]
 },
 {
  "question": "What is query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What does query evaluator mean ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Tell me something about query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "query evaluator",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Explain query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Elaborate query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Can you tell me about query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What do you know about query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What can you tell me about query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "I want to know aboutquery evaluator",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Do you have information about query evaluator ?",
  "answer": "Most common function of relational DBMSs\n read an SQL query\n return a table giving result of query\n E.g.\n select s.id, c.code, e.mark from   Students s, Courses c, Enrolments e where  s.id = e.student and e.course = c.id;",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What is query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What does query evaluator mean ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Tell me something about query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "query evaluator",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Explain query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Elaborate query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Can you tell me about query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What do you know about query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What can you tell me about query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "I want to know aboutquery evaluator",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "Do you have information about query evaluator ?",
  "answer": "Input: SQL query\n Output: table (displayed as text)\n",
  "intent": "description",
  "key_words": [
   "query",
   "evaluator"
  ]
 },
 {
  "question": "What is dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What does dbms architecture mean ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Tell me something about dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "dbms architecture",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Explain dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Elaborate dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Can you tell me about dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What do you know about dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What can you tell me about dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "I want to know aboutdbms architecture",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Do you have information about dbms architecture ?",
  "answer": "The aim of this course is to\n look inside the DBMS box\n discover the various mechanisms it uses\n understand and analyse their performance\n Why should we care? (apart from passing the exam)\n Practical reason:\n if we understand how query processor works,  we can do a better job of writing efficient queries\n Educational reason:\n DBMSs contain interesting data structures + algorithms  which may be useful outside the (relational) DBMS context\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What is dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What does dbms architecture mean ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Tell me something about dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "dbms architecture",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Explain dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Elaborate dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Can you tell me about dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What do you know about dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What can you tell me about dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "I want to know aboutdbms architecture",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Do you have information about dbms architecture ?",
  "answer": "Path of a query through a typical DBMS:\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What is dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What does dbms architecture mean ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Tell me something about dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "dbms architecture",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Explain dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Elaborate dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Can you tell me about dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What do you know about dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What can you tell me about dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "I want to know aboutdbms architecture",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Do you have information about dbms architecture ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What is dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What does dbms architecture mean ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Tell me something about dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "dbms architecture",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Explain dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Elaborate dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Can you tell me about dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What do you know about dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What can you tell me about dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "I want to know aboutdbms architecture",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "Do you have information about dbms architecture ?",
  "answer": "Important factors related to DBMS architecture\n data is stored permanently on large slow devices**\n data is processed in small fast memory\n Implications:\n data structures should minimise storage utilisation\n algorithms should minimise memory/disk data transfers\n Modern DBMSs interact with storage via the O/S file-system.\n  ** SSDs change things a little, but most high volume bulk storage still on disks\n",
  "intent": "description",
  "key_words": [
   "dbms",
   "architecture"
  ]
 },
 {
  "question": "What is database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "What does database engine operation mean ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Tell me something about database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "database engine operation",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Explain database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Elaborate database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "What do you know about database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutdatabase engine operation",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "Do you have information about database engine operation ?",
  "answer": "DB engine = \"relational algebra virtual machine\":\n selection (\u03c3) projection (\u03c0) join (\u22c8)\n union (\u222a) intersection (\u2229) difference (-)\n sort group aggregate\n For each of these operations:\n various data structures and algorithms are available\n DBMSs may provide only one, or may provide a choice\n",
  "intent": "description",
  "key_words": [
   "database",
   "engine",
   "operation"
  ]
 },
 {
  "question": "What is relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What does relational algebra mean ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Tell me something about relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "relational algebra",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Explain relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Elaborate relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Can you tell me about relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What do you know about relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What can you tell me about relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Do you have information about relational algebra ?",
  "answer": "Relational algebra (RA) can be viewed as ...\n mathematical system for manipulating relations, or\n data manipulation language (DML) for the relational model\n Core relational algebra operations:\n selection: choosing a subset of rows\n projection: choosing a subset of columns\n product, join: combining relations\n union, intersection, difference: combining relations\n rename: change names of relations/attributes\n Common extensions include:\n sorting (order by), partition (group by), aggregation\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What is relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What does relational algebra mean ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Tell me something about relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "relational algebra",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Explain relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Elaborate relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Can you tell me about relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What do you know about relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What can you tell me about relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "Do you have information about relational algebra ?",
  "answer": "All RA operators return a result of type relation.\n For convenience, we can name a result and use it later.\n E.g. database \u00a0 R1(x,y), \u00a0 R2(y,z), \u00a0\n  Tmp1(x,y)   = Sel[x>5]R1 Tmp2(y,z)   = Sel[z=3]R2 Tmp3(x,y,z) = Tmp1 Join Tmp2 Res(x,z)    = Proj[x,z] Tmp3 -- which is equivalent to Res(x,z)    = Proj[x,z]((Sel[x>5]R1) Join (Sel[z=3]R2)) -- which is equivalent to Tmp1(x,y,z) = R1 Join R2 Tmp2(x,y,z) = Sel[x>5 & z=3] Tmp1 Res(x,z)    = Proj[x,z]Tmp2 Each \"intermediate result\" has a well-defined schema.\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra"
  ]
 },
 {
  "question": "What is describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What does describing relational algebra operation mean ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Tell me something about describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "describing relational algebra operation",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Explain describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Elaborate describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What do you know about describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutdescribing relational algebra operation",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Do you have information about describing relational algebra operation ?",
  "answer": "We define the semantics of RA operations using\n \"conditional set\" expressions \u00a0 e.g. { x | condition }\n tuple notations:\n t[ab] \u00a0 (extracts attributes a and b from tuple t)\n (x,y,z) \u00a0 (enumerated tuples; specify attribute values)\n quantifiers, set operations, boolean operators\n Notation: r(R) means relation instance r based on schema R\n",
  "intent": "description",
  "key_words": [
   "describing",
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What is relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What does relational algebra operation mean ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Tell me something about relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "relational algebra operation",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Explain relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Elaborate relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What do you know about relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra operation",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Do you have information about relational algebra operation ?",
  "answer": "Selection\n \u03c3C(r) \u00a0 = \u00a0 Sel[C](r) \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r \u2227 C(t) }\n C is a boolean function that tests selection condition\n Computational view:\n result = {} for each tuple t in relation r     if (C(t)) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What is relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What does relational algebra operation mean ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Tell me something about relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "relational algebra operation",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Explain relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Elaborate relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What do you know about relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra operation",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Do you have information about relational algebra operation ?",
  "answer": "Projection\n \u03c0X(r) \u00a0 = \u00a0 Proj[X](r) \u00a0 = \u00a0 { t[X] \u00a0|\u00a0 t \u2208 r }\n X \u2286 R ; \u00a0result schema is given by attributes in X\n Computational view:\n result = {} for each tuple t in relation r     result = result \u222a {t[X]}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What is relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What does relational algebra operation mean ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Tell me something about relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "relational algebra operation",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Explain relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Elaborate relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What do you know about relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra operation",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Do you have information about relational algebra operation ?",
  "answer": "Set operations involve two relations r(R), s(R) \u00a0 (union-compatible)\n Union\n r1 \u222a r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2228 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = r1 for each tuple t in relation r2     result = result \u222a {t}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What is relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What does relational algebra operation mean ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Tell me something about relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "relational algebra operation",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Explain relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Elaborate relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What do you know about relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra operation",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Do you have information about relational algebra operation ?",
  "answer": "Intersection\n r1 \u2229 r2 \u00a0 = \u00a0 { t \u00a0|\u00a0 t \u2208 r1 \u2227 t \u2208 r2 }, \u00a0\u00a0\u00a0 where r1(R), r2(R)\n Computational view:\n result = {} for each tuple t in relation r1     if (t \u2208 r2) { result = result \u222a {t} }",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What is relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What does relational algebra operation mean ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Tell me something about relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "relational algebra operation",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Explain relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Elaborate relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What do you know about relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra operation",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Do you have information about relational algebra operation ?",
  "answer": "Theta Join\n r \u22c8C s \u00a0 = \u00a0 Join[C](r,s) \u00a0 =  \u00a0\u00a0\u00a0 { (t1 : t2) \u00a0|\u00a0 t1 \u2208 r \u2227 t2 \u2208 s \u2227 C(t1 : t2) }, where r(R),s(S)\n C is the join condition (involving attributes from both relations)\n Computational view:\n result = {} for each tuple t1 in relation r    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {concat(t1,t2)}",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What is relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What does relational algebra operation mean ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Tell me something about relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "relational algebra operation",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Explain relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Elaborate relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Can you tell me about relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What do you know about relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What can you tell me about relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "I want to know aboutrelational algebra operation",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "Do you have information about relational algebra operation ?",
  "answer": "Left Outer Join\n JoinLO[C](R,S) includes entries for all R tuples\n even if they have no matches with tuples in S under C\n Computational description of r(R)\u00a0LeftOuterJoin\u00a0s(S):\n result = {} for each tuple t1 in relation r    nmatches = 0    for each tuple t2 in relation s       if (matches(t1,t2,C))          result = result \u222a {combine(t1,t2)}          nmatches++    if (nmatches == 0)       result = result \u222a {combine(t1,Snull)} where Snull is a tuple with schema S and all atributes set to NULL.\n PostgreSQL\n",
  "intent": "description",
  "key_words": [
   "relational",
   "algebra",
   "operation"
  ]
 },
 {
  "question": "What is postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "What does postgresql mean ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Tell me something about postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "postgresql",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Explain postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Elaborate postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Can you tell me about postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "What do you know about postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "What can you tell me about postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "I want to know aboutpostgresql",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "Do you have information about postgresql ?",
  "answer": "PostgreSQL is a full-featured open-source (O)RDBMS.\n provides a relational engine with:\n efficient implementation of relational operations\n very good transaction processing (concurrent access)\n good backup/recovery (from application/system failure)\n novel query optimisation (genetic algorithm-based)\n replication, JSON, extensible indexing, etc. etc.\n already supports several non-standard data types\n allows users to define their own data types\n supports most of the SQL3 standard\n",
  "intent": "description",
  "key_words": [
   "postgresql"
  ]
 },
 {
  "question": "What is postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "What does postgresql online mean ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Tell me something about postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "postgresql online",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Explain postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Elaborate postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Can you tell me about postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "What do you know about postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "What can you tell me about postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "I want to know aboutpostgresql online",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "Do you have information about postgresql online ?",
  "answer": "Web site: www.postgresql.org\n Key developers: Bruce Momjian, Tom Lane, Marc Fournier, ...\n Full list of developers: www.postgresql.org/developer/bios\n Local copy of source code:\n http://www.cse.unsw.edu.au/~cs9315/18s2/postgresql/src.tar.bz2\n Documentation is available via WebCMS menu.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "online"
  ]
 },
 {
  "question": "What is user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "What does user view of postgresql mean ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Tell me something about user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "user view of postgresql",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Explain user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Elaborate user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Can you tell me about user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "What do you know about user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "What can you tell me about user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "I want to know aboutuser view of postgresql",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "Do you have information about user view of postgresql ?",
  "answer": "Users interact via SQL in a client process, e.g.\n  $ psql webcms psql (10.4) Type \"help\" for help. webcms2=# select * from calendar;  id | course |   evdate   |      event ----+--------+------------+---------------------------   1 |      4 | 2001-08-09 | Project Proposals due  10 |      3 | 2001-08-01 | Tute/Lab Enrolments Close  12 |      3 | 2001-09-07 | Assignment #1 Due (10pm)  ... or\n  $dbconn = pg_connect(\"dbname=webcms\"); $result = pg_query($dbconn,\"select * from calendar\"); while ($tuple = pg_fetch_array($result))    { ... $tuple[\"event\"] ... }",
  "intent": "description",
  "key_words": [
   "user",
   "view",
   "of",
   "postgresql"
  ]
 },
 {
  "question": "What is postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What does postgresql functionality mean ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Tell me something about postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "postgresql functionality",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Explain postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Elaborate postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What do you know about postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "I want to know aboutpostgresql functionality",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Do you have information about postgresql functionality ?",
  "answer": "PostgreSQL systems deal with various kinds of entities:\n users ... who can use the system, what they can do\n groups ... groups of users, for role-based privileges\n databases ... collections of schemas/tables/views/...\n namespaces ... to uniquely identify objects (schema.table.attr)\n tables ... collection of tuples (standard relational notion)\n views ... \"virtual\" tables (can be made updatable)\n functions ... operations on values from/in tables\n triggers ... operations invoked in response to events\n operators ... functions with infix syntax\n aggregates ... operations over whole table columns\n types ... user-defined data types (with own operations)\n rules ... for query rewriting (used e.g. to implement views)\n access methods ... efficient access to tuples in tables\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What is postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What does postgresql functionality mean ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Tell me something about postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "postgresql functionality",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Explain postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Elaborate postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What do you know about postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "I want to know aboutpostgresql functionality",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Do you have information about postgresql functionality ?",
  "answer": "PostgreSQL's dialect of SQL is mostly standard (but with extensions).\n attributes containing arrays of atomic values\n create table R ( id integer, values integer[] ); insert into R values ( 123, '{5,4,3,2,1}' ); table type inheritance\n create table S ( x float, y float); create table T inherits ( R, S ); table-valued functions\n create function f(integer) returns setof TupleType;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What is postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What does postgresql functionality mean ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Tell me something about postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "postgresql functionality",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Explain postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Elaborate postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What do you know about postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "I want to know aboutpostgresql functionality",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Do you have information about postgresql functionality ?",
  "answer": "PostgreSQL stored procedures differ from SQL standard:\n only provides functions, not procedures  (but functions can return void, effectively a procedure)\n allows function overloading  (same function name, different argument types)\n defined at different \"lexical level\" to SQL\n provides own PL/SQL-like language for functions\n create function ( ArgTypes ) returns ResultType as $$ ... body of function definition ... $$ language FunctionBodyLanguage;",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What is postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What does postgresql functionality mean ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Tell me something about postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "postgresql functionality",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Explain postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Elaborate postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Can you tell me about postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What do you know about postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What can you tell me about postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "I want to know aboutpostgresql functionality",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Do you have information about postgresql functionality ?",
  "answer": "Example:\n create or replace function     barsIn(suburb text) returns setof Bars as $$ declare     r record; begin     for r in         select * from Bars where location = suburb     loop        return next r;     end loop; end; $$ language plpgsql; used as e.g. select * from barsIn('Randwick');",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What is postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What does postgresql functionality mean ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Tell me something about postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "postgresql functionality",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Explain postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Elaborate postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Can you tell me about postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What do you know about postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What can you tell me about postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "I want to know aboutpostgresql functionality",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Do you have information about postgresql functionality ?",
  "answer": "Uses multi-version concurrency control (MVCC)\n multiple \"versions\" of the database exist together\n a transaction sees the version that was valid at its start-time\n readers don't block writers; writers don't block readers\n this significantly reduces the need for locking\n Disadvantages of this approach:\n extra storage for old versions of tuples \u00a0 (vacuum fixes this)\n  PostgreSQL also provides locking to enforce critical concurrency.\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What is postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What does postgresql functionality mean ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Tell me something about postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "postgresql functionality",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Explain postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Elaborate postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What do you know about postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What can you tell me about postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "I want to know aboutpostgresql functionality",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "Do you have information about postgresql functionality ?",
  "answer": "PostgreSQL has a well-defined and open extensibility model:\n stored procedures are held in database as strings\n allows a variety of languages to be used\n language interpreters can be integrated into engine\n can add new data types, operators, aggregates, indexes\n typically requires code written in C, following defined API\n for new data types, need to write input/output functions, ...\n for new indexes, need to implement file structures\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "functionality"
  ]
 },
 {
  "question": "What is postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What does postgresql architecture mean ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Tell me something about postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "postgresql architecture",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Explain postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Elaborate postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Can you tell me about postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What do you know about postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What can you tell me about postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "I want to know aboutpostgresql architecture",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Do you have information about postgresql architecture ?",
  "answer": "Client/server architecture:\n  The listener process is sometimes called postmaster\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What is postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What does postgresql architecture mean ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Tell me something about postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "postgresql architecture",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Explain postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Elaborate postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Can you tell me about postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What do you know about postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What can you tell me about postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "I want to know aboutpostgresql architecture",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Do you have information about postgresql architecture ?",
  "answer": "Memory/storage architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What is postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What does postgresql architecture mean ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Tell me something about postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "postgresql architecture",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Explain postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Elaborate postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Can you tell me about postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What do you know about postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What can you tell me about postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "I want to know aboutpostgresql architecture",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "Do you have information about postgresql architecture ?",
  "answer": "File-system architecture:\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "architecture"
  ]
 },
 {
  "question": "What is installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What does installing postgresql mean ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Tell me something about installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "installing postgresql",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Explain installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Elaborate installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Can you tell me about installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What do you know about installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What can you tell me about installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "I want to know aboutinstalling postgresql",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Do you have information about installing postgresql ?",
  "answer": "PostgreSQL is available via the COMP9315 web site.\n Provided as tar-file in ~cs9315/web/18s2/postgresql/\n File: src.tar.bz2 is ~15MB **\n Unpacked, source code is ~130MB **\n If using on CSE, do not put it under your home directory\n Place it under /srvr/YOU/ which has 500MB quota\n  ** Smaller than \"normal\" PG distribution ... documentation removed\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What is installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What does installing postgresql mean ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Tell me something about installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "installing postgresql",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Explain installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Elaborate installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Can you tell me about installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What do you know about installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What can you tell me about installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "I want to know aboutinstalling postgresql",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Do you have information about installing postgresql ?",
  "answer": "Environment setup for running PostgreSQL in COMP9315:\n # Must be \"source\"d from sh, bash, ksh, ...  # can be any directory PGHOME=/home/jas/srvr/pgsql # data does not need to be under $PGHOME export PGDATA=$PGHOME/data export PGHOST=$PGDATA export PGPORT=5432 export PATH=$PGHOME/bin:$PATH  alias p0=\"$D/bin/pg_ctl stop\" alias p1=\"$D/bin/pg_ctl -l $PGDATA/log start\" Will probably work (with tweaks) on home laptop if Linux or MacOS\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What is installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What does installing postgresql mean ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Tell me something about installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "installing postgresql",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Explain installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Elaborate installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Can you tell me about installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What do you know about installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What can you tell me about installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "I want to know aboutinstalling postgresql",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "Do you have information about installing postgresql ?",
  "answer": "Brief summary of installation:\n $ tar xfj ..../postgresql/src.tar.bz2   # create a directory postgresql-10.4 $ source ~/your/environment/file   # set up environment variables $ configure --prefix=$PGHOME $ make $ make install $ initdb   # set up postgresql configuration ... done once? $ edit postgresql.conf $ pg_ctl start -l $PGDATA/log   # do some work with PostgreSQL databases $ pg_ctl stop On CSE machines, ~cs9315/bin/pgs can simplify some things\n",
  "intent": "description",
  "key_words": [
   "installing",
   "postgresql"
  ]
 },
 {
  "question": "What is using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What does using postgresql for assignment mean ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Tell me something about using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "using postgresql for assignment",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Explain using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Elaborate using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Can you tell me about using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What do you know about using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What can you tell me about using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "I want to know aboutusing postgresql for assignment",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Do you have information about using postgresql for assignment ?",
  "answer": "If changes don't modify storage structures ...\n $ edit source code $ pg_ctl stop $ make $ make install $ pg_ctl start -l $PGDATA/log   # run tests, analyse results, ... $ pg_ctl stop In this case, existing databases will continue to work ok.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What is using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What does using postgresql for assignment mean ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Tell me something about using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "using postgresql for assignment",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Explain using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Elaborate using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Can you tell me about using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What do you know about using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What can you tell me about using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "I want to know aboutusing postgresql for assignment",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Do you have information about using postgresql for assignment ?",
  "answer": "If changes modify storage structures ...\n $ edit source code $ save a copy of postgresql.conf $ pg_dump testdb > testdb.dump $ pg_ctl stop $ make $ make install $ rm -fr $PGDATA $ initdb $ restore postgresql.conf $ pg_ctl start -l $PGDATA/log $ createdb testdb $ psql testdb -f testdb.dump   # run tests and analyse results Old databases will not work with the new server.\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What is using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What does using postgresql for assignment mean ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Tell me something about using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "using postgresql for assignment",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Explain using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Elaborate using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Can you tell me about using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What do you know about using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What can you tell me about using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "I want to know aboutusing postgresql for assignment",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "Do you have information about using postgresql for assignment ?",
  "answer": "Troubleshooting ...\n read the $PGDATA/log file\n which socket file are you trying to connect to?\n check the $PGDATA directory for socket files\n remove postmster.pid if sure no server running\n ...\n Prac Exercise P01 has useful tips down the bottom\n",
  "intent": "description",
  "key_words": [
   "using",
   "postgresql",
   "for",
   "assignment"
  ]
 },
 {
  "question": "What is postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What does postgresql source code mean ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Tell me something about postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "postgresql source code",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Explain postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Elaborate postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Can you tell me about postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What do you know about postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What can you tell me about postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "I want to know aboutpostgresql source code",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Do you have information about postgresql source code ?",
  "answer": "Top-level of PostgreSQL distribution contains:\n README,INSTALL: \u00a0 overview and installation instructions\n config*: \u00a0 scripts to build localised Makefiles\n Makefile: \u00a0 top-level script to control system build\n src: \u00a0 sub-directories containing system source code\n doc: \u00a0 FAQs and documentation (removed to save space)\n contrib: \u00a0 source code for contributed extensions\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What is postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What does postgresql source code mean ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Tell me something about postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "postgresql source code",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Explain postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Elaborate postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Can you tell me about postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What do you know about postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What can you tell me about postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "I want to know aboutpostgresql source code",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Do you have information about postgresql source code ?",
  "answer": "The source code directory (src) contains:\n include: \u00a0 *.h files with global definitions (constants, types, ...)\n backend: \u00a0 code for PostgreSQL database engine\n bin: \u00a0 code for clients (e.g. psql, pg_ctl, pg_dump, ...)\n pl: \u00a0 stored procedure language interpreters (e.g. plpgsql)\n interfaces \u00a0 code for low-level C interfaces (e.g. libpq)\n along with Makefiles to build system and other directories ...\n Code for backend (DBMS engine)\n ~1700 files (~1000.c, ~700.h, 8.y, 10.l), \u00a0 106 lines of code\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What is postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What does postgresql source code mean ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Tell me something about postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "postgresql source code",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Explain postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Elaborate postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Can you tell me about postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What do you know about postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What can you tell me about postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "I want to know aboutpostgresql source code",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Do you have information about postgresql source code ?",
  "answer": " become familiar with the user-level interface\n psql, pg_dump, pg_ctl\n start with the *.h files, then move to *.c files\n *.c files live under src/backend/*\n *.h files live under src/include)\n start globally, then work one subsystem-at-a-time\n Some helpful information is available via:\n PostgreSQL Doco link on web site\n Readings link on web site\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "How to get started understanding the workings of PostgreSQL?",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What is postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What does postgresql source code mean ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Tell me something about postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "postgresql source code",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Explain postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Elaborate postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Can you tell me about postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What do you know about postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What can you tell me about postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "I want to know aboutpostgresql source code",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Do you have information about postgresql source code ?",
  "answer": "PostgreSQL documentation has detailed description of internals:\n Section VII, Chapters 50 - 68\n Ch.60 is an overview; a good place to start\n other chapters discuss specific components\n See also \"How PostgreSQL Processes a Query\"\n src/tools/backend/index.html\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What is postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What does postgresql source code mean ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Tell me something about postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "postgresql source code",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Explain postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Elaborate postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Can you tell me about postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What do you know about postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What can you tell me about postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "I want to know aboutpostgresql source code",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "Do you have information about postgresql source code ?",
  "answer": "exec_simple_query(const char *query_string)\n defined in src/backend/tcop/postgres.c\n entry point for evaluating SQL queries\n assumes query_string is one or more SQL statements\n  parsetree_list = pg_parse_query(query_string); foreach(parsetree, parsetree_list) {   querytree_list = pg_analyze_and_rewrite(parsetree, ...);   plantree_list = pg_plan_queries(querytree_list, ...);   portal = CreatePortal(...); // query execution env   PortalDefineQuery(portal, ..., plantree_list, ...);   receiver = CreateDestReceiver(dest); // client   PortalRun(portal, ..., receiver, ...);   ... } Storage Management\n",
  "intent": "description",
  "key_words": [
   "postgresql",
   "source",
   "code"
  ]
 },
 {
  "question": "What is storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What does storage management mean ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Tell me something about storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "storage management",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Explain storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Elaborate storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Can you tell me about storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What do you know about storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What can you tell me about storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "I want to know aboutstorage management",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Do you have information about storage management ?",
  "answer": "Aims of storage management in DBMS:\n provide view of data as collection of tables/tuples\n map from database objects (e.g. tables) to disk files\n manage transfer of data to/from disk storage\n use buffers to minimise disk/memory transfers\n interpret loaded data as tuples/records\n give foundation for file structures used by access methods\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What is storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What does storage management mean ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Tell me something about storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "storage management",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Explain storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Elaborate storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Can you tell me about storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What do you know about storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What can you tell me about storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "I want to know aboutstorage management",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "Do you have information about storage management ?",
  "answer": "Levels of DBMS related to storage management:\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management"
  ]
 },
 {
  "question": "What is view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What does view of data mean ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Tell me something about view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "view of data",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Explain view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Elaborate view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Can you tell me about view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What do you know about view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What can you tell me about view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "I want to know aboutview of data",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Do you have information about view of data ?",
  "answer": "Users and top-level query evaluator see data as\n a collection of tables, each with a schema (tuple-type)\n where each table contains a set (sequence) of tuples\n ",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What is view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What does view of data mean ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Tell me something about view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "view of data",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Explain view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Elaborate view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Can you tell me about view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What do you know about view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What can you tell me about view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "I want to know aboutview of data",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Do you have information about view of data ?",
  "answer": "Relational operators and access methods see data as\n sequence of fixed-size pages, typically 1KB to 8KB\n where each page contains tuple data or index data\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What is view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What does view of data mean ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Tell me something about view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "view of data",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Explain view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Elaborate view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Can you tell me about view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What do you know about view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What can you tell me about view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "I want to know aboutview of data",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "Do you have information about view of data ?",
  "answer": "File manager sees both DB objects and file store\n maps (tableName, pageIndex) to (file, offset)\n",
  "intent": "description",
  "key_words": [
   "view",
   "of",
   "data"
  ]
 },
 {
  "question": "What is storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "What does storage management topic mean ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Tell me something about storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "storage management topic",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Explain storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Elaborate storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Can you tell me about storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "What do you know about storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "What can you tell me about storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "I want to know aboutstorage management topic",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "Do you have information about storage management topic ?",
  "answer": "Topics to be considered:\n DB Object Management (Catalog)\n how tables/functions/types, etc. are represented\n Disks and Files\n performance issues and organisation of disk files\n Buffer Management\n using caching to improve DBMS system throughput\n Tuple/Page Management\n how tuples are represented within disk pages\n Each topic illustrated by its PostgreSQL implementation.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "management",
   "topic"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "The storage manager provides higher levels of system\n with an abstraction based on relations/pages/tuples\n which maps down to files/blocks/records (via buffers)\n Example: simple scan of a relation:\n select student,course from Enrolments High-level view of result: sequence of tuples.\n How is this mapped to accesses to files/blocks/records?\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "The query:\n select student, course from Enrolments; (Roughly) how it's executed:\n DB db = openDatabase(\"myDB\"); Reln r = openRel(db,\"Enrolments\"); Scan s = startScan(r); Tuple t;  Results res = NULL; while ((t = nextTuple(s)) != NULL) {     int stuid = getField(t,\"student\");     char *course = getField(t,\"course\");     res = addTuple(res, mkTuple(stuid,course)); }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "The storage manager provides mechanisms for:\n representing database objects during query execution\n DB (handle on an authorised/opened database)\n Reln (handle on an opened relation)\n Page (memory buffer to hold contents of data block)\n Tuple (memory holding data values from one tuple)\n referring to database objects (addresses)\n symbolic (e.g. database/schema/table/field names)\n abstract physical (e.g. PageId, TupleId)\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "Examples of references (addresses) used in DBMSs:\n PageID ... identifies (locates) a block of data\n typically, PageID = FileID + Offset\n where Offset gives location of block within file\n TupleID ... identifies (locates) a single tuple\n typically, TupleID = PageID + Offset\n where Offset gives location of tuple within page\n Note that Offsets may be indexes into mapping tables giving real address.\n",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "Possible implementation for DB object ...\n typedef struct Database {    char    *name; // database name    Catalog  cat;  // meta-data    ... } *DB; Possible implementation of Reln object ...\n typedef struct Relation {    char    *name; // table name    File     file; // fd for table file    ... } *Reln;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "Possible implementation for Scan object ...\n query executor wants to see result tuple-at-a-time\n DBMS read blocks from files (page-of-tuples-at-a-time)\n typedef struct ScanData {    File  file;   // file holding table data    Page  page;   // most recently read data    int   pageno; // current block within file    int   tupno;  // current tuple within page    ... } *Scan;",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "startScan() might be implemented as:\n Scan startScan(Reln r) {    Scan s = MemAlloc(struct ScanData);    s->file = r->file;    s->page = null;    s->pageno = 0;    s->tupno = 0;    return s; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What does storage manager interface mean ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Tell me something about storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "storage manager interface",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Explain storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Elaborate storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Can you tell me about storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What do you know about storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What can you tell me about storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "I want to know aboutstorage manager interface",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "Do you have information about storage manager interface ?",
  "answer": "And nextTuple() might be implemented as:\n Tuple nextTuple(Scan s) {    if (noMoreTuplesIn(s->page,s->tupno))       if (noMorePagesIn(s->file))          return NULL;       s->page = getPage(s->file,s->pageno);       s->pageno++;       s->tupno = 0;    }    Tuple t = getTuple(s->page,s->tupno);    s->tupno++;    return t; }",
  "intent": "description",
  "key_words": [
   "storage",
   "manager",
   "interface"
  ]
 },
 {
  "question": "What is from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "What does from symbolic to internal mean ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Tell me something about from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "from symbolic to internal",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Explain from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Elaborate from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Can you tell me about from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "What do you know about from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "What can you tell me about from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "I want to know aboutfrom symbolic to internal",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "Do you have information about from symbolic to internal ?",
  "answer": " information about a database, given its name\n information about a table, given its name\n DBMSs use catalog data in special tables\n E.g. for PostgreSQL\n  pg_database(oid, datname, datdba, datacl[], ...) pg_namespace(oid, nspname, nspowner, nspacl[], ...) pg_class(oid, relname, relnamespace, ..., relkind,          reltuples, relnatts, relhaspkey, relacl[] ...) pg_attribute(oid, attrelid, attname, atttypid, attnum, ...) pg_type(oid, typname, typnamespace, typowner, typlen, ...) Catalogs\n",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "How do we determine ?",
  "intent": "description",
  "key_words": [
   "from",
   "symbolic",
   "to",
   "internal"
  ]
 },
 {
  "question": "What is database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What does database object mean ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Tell me something about database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "database object",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Explain database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Elaborate database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Can you tell me about database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What do you know about database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What can you tell me about database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "I want to know aboutdatabase object",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Do you have information about database object ?",
  "answer": "RDBMSs manage different kinds of objects\n databases, schemas, tablespaces\n relations/tables, attributes, tuples/records\n constraints, assertions\n views, stored procedures, triggers, rules\n Many objects have names (and, in PostgreSQL, all have OIDs).\n How are the different types of objects represented?\n How do we go from a name (or OID) to bytes stored on disk?\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What is database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What does database object mean ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Tell me something about database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "database object",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Explain database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Elaborate database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Can you tell me about database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What do you know about database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What can you tell me about database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "I want to know aboutdatabase object",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Do you have information about database object ?",
  "answer": "Consider what information the RDBMS needs about relations:\n name, owner, primary key of each relation\n name, data type, constraints for each attribute\n authorisation for operations on each relation\n Similarly for other DBMS objects (e.g. views, functions, triggers, ...)\n This information is stored in the system catalog tables\n Standard for catalogs in SQL:2003: INFORMATION_SCHEMA\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What is database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What does database object mean ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Tell me something about database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "database object",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Explain database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Elaborate database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Can you tell me about database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What do you know about database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What can you tell me about database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "I want to know aboutdatabase object",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Do you have information about database object ?",
  "answer": "The catalog is affected by several types of SQL operations:\n create Object as Definition\n drop Object ...\n alter Object \u00a0 Changes\n grant Privilege on Object\n where Object is one of table, view, function, trigger, schema, ...\n E.g. drop table Groups; produces something like\n delete from Tables where  schema = 'public' and name = 'groups';",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What is database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What does database object mean ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Tell me something about database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "database object",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Explain database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Elaborate database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Can you tell me about database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What do you know about database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What can you tell me about database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "I want to know aboutdatabase object",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Do you have information about database object ?",
  "answer": "In PostgreSQL, the system catalog is available to users via:\n special commands in the psql shell (e.g. \\d)\n SQL standard information_schema   e.g. select * from information_schema.tables;\n  The low-level representation is available to sysadmins via:\n a global schema called pg_catalog\n a set of tables/views in that schema (e.g. pg_tables)\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What is database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What does database object mean ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Tell me something about database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "database object",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Explain database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Elaborate database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Can you tell me about database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What do you know about database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What can you tell me about database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "I want to know aboutdatabase object",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Do you have information about database object ?",
  "answer": "A PostgreSQL installation (cluster) typically has many DBs\n Some catalog information is global, e.g.\n catalog tables defining: databases, users, ...\n one copy of each such table for the whole PostgreSQL installation\n shared by all databases in the cluster (in PGDATA/pg_global)\n Other catalog information is local to each database, e.g\n schemas, tables, attributes, functions, types, ...\n separate copy of each \"local\" table in each database\n a copy of many \"global\" tables is made on database creation\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What is database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What does database object mean ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Tell me something about database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "database object",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Explain database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Elaborate database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Can you tell me about database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What do you know about database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What can you tell me about database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "I want to know aboutdatabase object",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "Do you have information about database object ?",
  "answer": "Side-note: \u00a0 PostgreSQL tuples contain\n owner-specified attributes (from create table)\n system-defined attributes\n oid unique identifying number for tuple (optional)\n tableoid which table this tuple belongs to\n xmin/xmax which transaction created/deleted tuple (for MVCC)\n OIDs are used as primary keys in many of the catalog tables.\n",
  "intent": "description",
  "key_words": [
   "database",
   "object"
  ]
 },
 {
  "question": "What is representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What does representing database mean ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Tell me something about representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "representing database",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Explain representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Elaborate representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Can you tell me about representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What do you know about representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What can you tell me about representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "I want to know aboutrepresenting database",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Do you have information about representing database ?",
  "answer": "Above the level of individual DB schemata, we have:\n databases ... represented by pg_database\n schemas ... represented by pg_namespace\n table spaces ... represented by pg_tablespace\n These tables are global to each PostgreSQL cluster.\n Keys are names (strings) and must be unique within cluster.\n",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What is representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What does representing database mean ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Tell me something about representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "representing database",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Explain representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Elaborate representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Can you tell me about representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What do you know about representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What can you tell me about representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "I want to know aboutrepresenting database",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "Do you have information about representing database ?",
  "answer": "pg_database contains information about databases:\n oid, datname, datdba, datacl[], encoding, ...\n pg_namespace contains information about schemata:\n oid, nspname, nspowner, nspacl[]\n pg_tablespace contains information about tablespaces:\n oid, spcname, spcowner, spcacl[]\n PostgreSQL represents access via array of access items:\n Role=Privileges/Grantor where Privileges is a string enumerating privileges, e.g.\n jas=arwdRxt/jas,fred=r/jas,joe=rwad/jas",
  "intent": "description",
  "key_words": [
   "representing",
   "database"
  ]
 },
 {
  "question": "What is representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "What does representing table mean ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Tell me something about representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "representing table",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Explain representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Elaborate representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Can you tell me about representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "What do you know about representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "What can you tell me about representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "I want to know aboutrepresenting table",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Do you have information about representing table ?",
  "answer": "Representing one table needs tuples in several catalog tables.\n Due to O-O heritage, base table for tables is called pg_class.\n The pg_class table also handles other \"table-like\" objects:\n views ... represents attributes/domains of view\n composite (tuple) types ... from CREATE TYPE AS\n sequences, indexes (top-level defn), other \"special\" objects\n All tuples in pg_class have an OID, used as primary key.\n Some fields from the pg_class table:\n oid, relname, relnamespace, reltype, relowner\n relkind, reltuples, relnatts, relhaspkey, relacl, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "What is representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "What does representing table mean ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Tell me something about representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "representing table",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Explain representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Elaborate representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Can you tell me about representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "What do you know about representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "What can you tell me about representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "I want to know aboutrepresenting table",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 },
 {
  "question": "Do you have information about representing table ?",
  "answer": "Details of catalog tables representing database tables\n pg_class holds core information about tables\n relname, relnamespace, reltype, relowner, ...\n relkind, relnatts, relhaspkey, relacl[], ...\n pg_attribute contains information about attributes\n attrelid, attname, atttypid, attnum, ...\n pg_type contains information about types\n typname, typnamespace, typowner, typlen, ...\n typtype, typrelid, typinput, typoutput, ...\n",
  "intent": "description",
  "key_words": [
   "representing",
   "table"
  ]
 }
]